<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA 1.2 Topic//EN" "/usr/share/dita-ot/dtd/technicalContent/dtd/topic.dtd">
<topic id="systemes-de-gestion-de-versions-rustiques-mais-fiables" xml:lang="fr-fr">
  <title>Les systèmes de gestion de versions - rustiques mais fiables</title>
  <body>
    <p>
      Travailler sur des fichiers sources au format texte, et non binaire, est
      l'occasion pour le <b>rédacteur technique</b> de gérer son contenu comme
      les développeurs gèrent leur code : sous un système de gestion des sources
      tel que Git, Subversion ou SourceSafe.
    </p>
    <p>
      Ces systèmes :
    </p>
    <ul>
      <li>
        favorisent le travail de groupe,
      </li>
      <li>
        suppriment les copies de fichiers en doublons et
      </li>
      <li>
        réduisent le risque de perte de données à presque zéro.
      </li>
    </ul>
    <p>
      Sur des fichiers texte, et non binaires, un système de gestion de version
      offre des fonctionnalités supérieures :
    </p>
    <ul>
      <li>
        pas de risque de pertes de données en cas de défaillance du réseau
        <fn>En cas d'incident réseau, l'utilisateur est averti que la
        transaction destinée à placer le fichier modifié sur le dépôt a échoué ;
        il peut alors procéder à une nouvelle transaction, sa copie locale du
        fichier étant intacte.</fn>,
      </li>
      <li>
        possibilités de travail <i>off-line</i> (déconnecté) poussées
        <fn>Surtout sous Git, conçu explicitement dans ce but.</fn>,
      </li>
      <li>
        non-verrouillage des fichiers par les membres de l'équipe qui les ont
        ouverts.
      </li>
      <li>
        possibilité de restauration très fine et dans le temps (depuis le
        dernier dépôt du fichier sur le référentiel) et en termes de quantité de
        travail <fn>Les systèmes de gestion de version favorisent un dépôt
        fréquent de modifications atomiques.</fn>.
      </li>
    </ul>
    <fig>
      <title>Le système de gestion de versions conserve l'historique des
      modifications.</title>
      <image href="../graphics/versioning-system.png" />
    </fig>
    <p>
      Des interfaces graphiques permettent d'utiliser directement sous les
      gestionnaires de fichiers ces outils originellement conçus pour être
      utilisés en ligne de commande. Cependant, le paradigme sur lequel ils
      reposent est parfois difficile à appréhender pour les publics les moins
      technophiles <fn>Même si Apple a contribué à en populariser certains
      aspects avec son application <i>Time machine</i>.</fn>.
    </p>
    <p>
      Les systèmes de gestion des sources utilisent les concepts suivants :
    </p>
    <simpletable>
      <strow>
        <stentry>
          Tronc
        </stentry>
        <stentry>
          Dépôt principal conservant toutes les versions des fichiers placées au
          cours du temps par le <b>rédacteur technique</b> (ou plus fréquemment,
          le développeur).
        </stentry>
      </strow>
      <strow>
        <stentry>
          Branche
        </stentry>
        <stentry>
          Dépôt secondaire créé à partir de la version principale du code
          source.
        </stentry>
      </strow>
      <strow>
        <stentry>
          Tag
        </stentry>
        <stentry>
          Instantané du tronc ou d'une branche à un instant <i>t</i>. Permet de
          figer facilement une version, par exemple, la version publiée, et de
          créer une archive.
        </stentry>
      </strow>
    </simpletable>
    <p>
      Si l'on s'en donne la peine, il est également possible de mal utiliser les
      systèmes de gestion de version et de perdre des données. Mais, en
      pratique, à même niveau d'effort et de compétence, le risque de perdre de
      données est nettement moindre si le <b>rédacteur technique</b> manipule
      des fichiers texte sous un gestionnaire de version plutôt que des fichiers
      binaires sur un répertoire partagé.
    </p>
    <p>
      Les systèmes de gestion de code source ont une fiabilité éprouvée et
      gèrent des millions de lignes de code. Tout comme les systèmes de fichiers
      (Ext4, Btrfs, etc.) ils évoluent lentement, selon une politique
      conservatrice, et ne sont proposés en production que lorsqu'ils ont été
      exhaustivement débogués. Si les plus grands projets de développement
      informatique, tel que GNU/Linux, par exemple, leur font confiance,
      pourquoi ne pas également leur confier la <i>documentation technique</i> ?
    </p>
    <p>
      Un bémol cependant : ces outils ne sont pas destinés spécifiquement au
      format XML et effectuent des comparaisons ligne par ligne entre les
      fichiers, et non pas nœud par nœud, ce qui multiplie inutilement les
      conflits entre les <i>commits</i> ou les branches.
    </p>
  </body>
</topic>
