<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA 1.2 Topic//EN"
"/usr/share/dita-ot/dtd/technicalContent/dtd/topic.dtd">
<topic id="fournir-une-information-ciblée-avec-le-texte-conditionnel-ditaval">
  <title>Fournir une information ciblée avec le texte conditionnel
  ditaval</title>
  <body>
    <p>
      Un fichier <xref format="html" scope="external"
      href="http://docs.oasis-open.org/dita/v1.2/os/spec/common/about-ditaval.html">
      ditaval</xref> reprend le principe des lunettes que vous chaussez pour
      visualiser un film en 3D : le verre gauche masque une moitié de l'image,
      le verre droit en masque l'autre moitié. Mais seul le <b>rédacteur
      technique</b> dispose de lunettes 3D et a une vision complète de
      l'information contenue dans le projet DITA XML.
    </p>
    <p>
      Les destinataires de l'information disposent de lunettes avec deux verres
      gauches ou deux verres droits. Ils ne voient donc qu'une partie de
      l'information. Loin d'être lésés par cet état de fait, ils ont ainsi un
      meilleur accès à l'information. Le profilage réalisé masque à chaque
      public les informations dont ils n'ont <b>pas</b> besoin et qui ne
      seraient pour eux que du bruit. Chaque audience bénéficie donc d'un
      meilleur accès à l'information qui la concerne, selon le fameux concept
      minimaliste de <b>less is more</b>.
    </p>
    <fig>
      <title>Texte conditionnel avec DITA XML</title>
      <image href="graphics/ditaval.png" />
    </fig>
    <p>
      Concrètement, le mécanisme <b>ditaval</b> est basé sur des opérateurs
      binaires : vous marquez un bloc d'information avec un attribut et une
      valeur, puis incluez ou excluez ce bloc dans le livrable en passant un
      opérande lors de la compilation (le bloc est inclus par défaut si aucun
      opérande n'est spécifié). C'est le principe du <b>texte conditionnel</b>.
    </p>
    <p>
      Gâce à ce mécanisme, il n'est pas nécessaire de créer deux fichiers
      différents lorsque leur contenu ne comporte que des variations
      mineures. C'est un outil de plus destiné à réduire la redondance du
      contenu source.
    </p>
    <p>
      Vous pouvez appliquer des clés de filtrage en série (condition <b>et</b>)
      en indiquant plusieurs valeurs séparées par des espaces dans les attributs
      <b>product</b>, <b>audience</b> ou autre.
    </p>
    <p>
      <b>Exemple</b>
    </p>
    <p>
      Pour indiquer qu'une remarque est destinée à la fois à des électriciens et
      à des utilisateurs avancés en voulant profiler l'information selon les
      publics suivants :
    </p>
    <ul>
      <li>
        <p>
          non électriciens,
        </p>
      </li>
      <li>
        <p>
          électriciens débutants,
        </p>
      </li>
      <li>
        <p>
          électriciens experts.
        </p>
      </li>
    </ul>
    <p>
      Vous pouvez utiliser la structure suivante :
    </p>
    <codeblock>
      &lt;step audience=&quot;electricians advanced&quot;&gt;
      &lt;cmd&gt; Ramenez l'intensité sous la dose létale de 150mA. &lt;/cmd&gt;
      &lt;/step&gt;
    </codeblock>
    <note type="warning">
      <p>
        Une clé de filtrage mal positionnée peut entraîner une erreur de
        compilation. En effet, si le code non filtré est conforme au schéma XSD
        DITA, le code filtré peut ne pas l'être.
      </p>
      <p>
        <b>Exemple</b>
      </p>
      <p>
        Le code suivant est correct avant filtrage :
      </p>
      <codeblock>
        &lt;thead&gt;
        &lt;row product=&quot;a&gt;
        &lt;entry&gt;Commande&lt;/entry&gt;
        &lt;entry&gt;Description&lt;/entry&gt;
        &lt;/row&gt;
        &lt;/thead&gt;
      </codeblock>
      <p>
        Après filtrage, en revanche, on obtient le code suivant :
      </p>
      <codeblock>
        &lt;thead&gt;
        &lt;/thead&gt;
      </codeblock>
      <p>
        Or, selon le schéma XSD, les en-têtes de tableaux doivent contenir au
        moins une ligne:
      </p>
      <codeblock>
        &lt;!ENTITY % thead.content &quot;((%row;)+)&gt;
      </codeblock>
      <p>
        Ce code est donc incorrect et entraîne l'échec de la compilation.
      </p>
    </note>
  </body>
</topic>
