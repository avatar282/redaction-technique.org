<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE article
PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article>
  <title>rédaction-technique.org</title>
  <section id="diminuer-les-couts-ameliorer-la-satisfaction-client">
    <title>Documentation technique&nbsp;: diminuer les coûts, améliorer la
    satisfaction client</title>
    <para>
      La documentation technique, c'est comme une ampoule&nbsp;: une ampoule
      basse consommation demande un investissement plus important en début de
      cycle de vie, mais a rapidement un coût plus faible.
    </para>
    <para>
      Comme une ampoule basse consommation, un processus de rédaction technique
      industriel diminue les coûts. Il réduit également le <emphasis
      role="italic">time to market</emphasis>. À coût initial légèrement
      supérieur ou égal, il améliore également la qualité.
    </para>
    <informaltable>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>
              Coût moindre
            </entry>
            <entry>
              <itemizedlist>
                <listitem>
                  <para>
                    moins de volume à créer
                  </para>
                </listitem>
                <listitem>
                  <para>
                    suppression des mises à jour répétitives
                  </para>
                </listitem>
                <listitem>
                  <para>
                    moins de volume à traduire
                  </para>
                </listitem>
              </itemizedlist>
            </entry>
          </row>
          <row>
            <entry>
              <emphasis role="italic">Time to market</emphasis> réduit
            </entry>
            <entry>
              <itemizedlist>
                <listitem>
                  <para>
                    réutilisation maximale du contenu
                  </para>
                </listitem>
                <listitem>
                  <para>
                    risque zéro de perte de données
                  </para>
                </listitem>
              </itemizedlist>
            </entry>
          </row>
          <row>
            <entry>
              Qualité améliorée
            </entry>
            <entry>
              <itemizedlist>
                <listitem>
                  <para>
                    briques d'information facilement optimisables
                  </para>
                </listitem>
                <listitem>
                  <para>
                    cohérence parfaite du contenu d'entreprise
                  </para>
                </listitem>
              </itemizedlist>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      Une documentation industrielle repose sur&nbsp;:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          un format documentaire modulaire,
        </para>
      </listitem>
      <listitem>
        <para>
          un format de rédaction structurée,
        </para>
      </listitem>
      <listitem>
        <para>
          une chaîne de production et de publication documentaire fiable.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Si la chaîne de création et de publication choisie repose sur des
      logiciels <emphasis role="italic">open-source</emphasis>, le coût de mise
      en place et d'apprentissage peut même être compensé par l'économie sur les
      licences de logiciels. En tout état de cause, de trop nombreuses sociétés
      de haute technologie ont industrialisé leurs processus métier, mais
      laissent en friche la création, la gestion et la publication de leur
      contenu d'entreprise. Les coûts cachés (rédaction par des ingénieurs et
      non par un <emphasis role="bold">rédacteur technique</emphasis> compétent,
      mauvaise exploitation du capital immatériel, diminution de la satisfaction
      client, augmentation des coûts de support, etc.)  peuvent être
      considérables. Pourtant, les solutions et les compétences existent.
    </para>
    <itemizedlist>
      <title>Related links</title>
      <listitem>
        <para>
          <xref linkend="de-la-redaction-a-la-communication-technique"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="les-trois-niveaux-de-la-documentation-technique"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="principe-de-simplicite-kiss"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="formats-et-outils"/>
        </para>
      </listitem>
    </itemizedlist>
    <section id="de-la-redaction-a-la-communication-technique">
      <title>De la rédaction à la communication technique</title>
      <para>
        Le but de la communication technique est de transformer les prospects en
        clients satisfaits. Le <emphasis role="bold">rédacteur
        technique</emphasis> fournit au marché l'information dont il a besoin
        pour sélectionner, évaluer et utiliser une solution de haute
        technologie. Au sein de l'entreprise, il est l'interface entre les
        services R&amp;D et marketing. À l'extérieur, il crée le dialogue entre
        l'entreprise et ses différents publics.
      </para>
      <para>
        La communication technique est souvent réduite à la rédaction
        technique. La rédaction technique est destinée à fournir la
        documentation des produits, et intervient en aval de la vente. La
        communication technique intervient dès l'amont du processus de vente et
        accompagne le produit tout au long de son cycle de vie. Destinée autant
        au grand public, aux journalistes et aux prospects qu'aux clients, elle
        dépasse et englobe la rédaction technique, destinée uniquement aux
        utilisateurs.
      </para>
      <figure>
        <title>Supports de rédaction marketing et technique</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../graphics/marketing-technique.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>
        La communication technique a pour but de montrer l'adéquation d'un
        produit aux besoins de sa cible. Elle recourt pour cela à différents
        supports, plus ou moins adaptés au niveau d'expertise de son public et à
        son statut par rapport à l'entreprise (grand public, journalistes,
        prospects, clients…). Le <emphasis role="bold">rédacteur
        technique</emphasis> doit adapter son message à chaque public. Utilisant
        toutes les ressources de la communication (rédaction, illustrations,
        films, animations…) il prend constamment en compte la dimension
        marketing. Pour augmenter les ventes, tout support de communication doit
        être un outil marketing.
      </para>
      <para>
        Mais peut-on être à la fois logique et créatif&nbsp;? C'est nécessaire
        dans les domaines de la composition musicale, de l'architecture et du
        développement informatique. C'est également le cas pour un rédacteur
        technique.
      </para>
      <para>
        Ceci nécessite&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            une étude de l'adéquation entre les besoins du public et les moyens
            de l'entreprise,
          </para>
        </listitem>
        <listitem>
          <para>
            une bonne capacité de création et de rédaction,
          </para>
        </listitem>
        <listitem>
          <para>
            une gestion de projet rigoureuse,
          </para>
        </listitem>
        <listitem>
          <para>
            un processus industriel de production et de valorisation du contenu.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Ce site présente quelques exemples de supports de communication
        technique, leur intérêt marketing, leur adéquation au public et les
        modalités de leur valorisation.
      </para>
      <para>
        Valoriser un contenu signifie&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            produire un contenu de qualité adapté à sa cible,
          </para>
        </listitem>
        <listitem>
          <para>
            conserver tout le contenu existant, dans ses différentes versions,
          </para>
        </listitem>
        <listitem>
          <para>
            réutiliser ou recycler à bon escient le contenu existant.
          </para>
        </listitem>
      </itemizedlist>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="diminuer-les-couts-ameliorer-la-satisfaction-client"/>
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="les-trois-niveaux-de-la-documentation-technique">
      <title>Les trois niveaux de la documentation technique</title>
      <para>
        Si l'on compare la documentation technique à un jardin, on peut la
        classifier selon les niveaux suivants&nbsp;:
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Niveau
              </entry>
              <entry>
                Description
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                Friche
              </entry>
              <entry>
                <itemizedlist>
                  <listitem>
                    <para>
                      Pas d'utilisation de processus documentaire
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Création de la documentation par des équipes non dédiées
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Utilisation de formats non adaptés ou utilisation
                      incohérente de formats adaptés
                    </para>
                  </listitem>
                </itemizedlist>
              </entry>
            </row>
            <row>
              <entry>
                Jardin à l'anglaise
              </entry>
              <entry>
                <itemizedlist>
                  <listitem>
                    <para>
                      Utilisation de processus documentaires fiables
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Création de la documentation par des équipes dédiées
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Utilisation cohérente de formats adaptés, mais non
                      structurés
                    </para>
                  </listitem>
                </itemizedlist>
              </entry>
            </row>
            <row>
              <entry>
                Jardin à la française
              </entry>
              <entry>
                <itemizedlist>
                  <listitem>
                    <para>
                      Utilisation de processus documentaires fiables
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Création de la documentation par des équipes dédiées
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Utilisation cohérente de formats structurés
                    </para>
                  </listitem>
                </itemizedlist>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Les formats non adaptés à la rédaction technique sont par exemple les
        formats de traitement de texte, qui ne dissocient pas suffisamment la
        mise en page du contenu.
      </para>
      <para>
        Les formats adaptés sont les formats de type FrameMaker, qui dissocient
        (relativement) la mise en page du contenu, mais ne sont pas sémantiques.
      </para>
      <para>
        Les formats structurés sont les formats sémantiques de type DocBook ou
        DITA XML.
      </para>
      <para>
        Le stade du jardin à l'anglaise est déjà très satisfaisant et garantit
        qu'une information de qualité est fournie à l'utilisateur. Celui du
        jardin à la française permet en outre à l'entreprise de mieux maîtriser
        son contenu et de réduire les coûts de production.
      </para>
      <para>
        À elle seule, la présence d'une des trois composantes (processus, équipe
        dédiée et format adapté) ne peut garantir un résultat
        satisfaisant. Confiez par exemple des outils permettant de générer du
        contenu au format DITA XML à des collaborateurs dont la communication
        technique n'est pas le métier ou sans mettre en place de processus de
        gestion du cycle de vie de la documentation technique, et vous
        obtiendrez des résultats décevants. Seule la présence conjointe de ces
        trois éléments fournira un résultat optimal.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="diminuer-les-couts-ameliorer-la-satisfaction-client"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="un-index-est-il-utile-dans-un-pdf"/>
          </para>
        </listitem>
      </itemizedlist>
      <section id="un-index-est-il-utile-dans-un-pdf">
        <title>Un index est-il utile dans un PDF&nbsp;?</title>
        <para>
          À l'heure des documents dématérialisés, un index est-il un élément
          indispensable d'une bonne documentation technique&nbsp;?
        </para>
        <para>
          La recherche en plein texte semble avoir détrôné l'index. Les notices
          techniques ne sont plus qu'exceptionnellement fournies aux clients
          sous forme papier. Ce drôle d'objet qu'est le PDF, format d'échange
          entre un format source non destiné aux clients et une version imprimée
          qui ne l'est que de manière marginale, est entré dans les mœurs. La
          séquence de touches <emphasis role="italic">Ctrl+F</emphasis> est un
          réflexe plus naturel aujourd'hui pour qui recherche une information.
        </para>
        <para>
          Un texte destiné au Web recourra à une grande dispersion
          terminologique pour accroître sa visibilité sur les moteurs de
          recherche. L'emploi des synonymes est de rigueur pour donner au
          lecteur potentiel plusieurs chemins d'accès à la source d'information
          qui peut l'intéresser. Les moteurs de recherche ont rendu l'index
          caduc.
        </para>
        <para>
          Si la documentation technique utilise une terminologie cohérente,
          l'efficacité de la recherche en plein texte est réduite&nbsp;: si le
          <emphasis role="bold">rédacteur technique</emphasis> a utilisé
          uniquement le terme <emphasis role="italic">répertoire</emphasis>, le
          lecteur qui recherche le mot <emphasis
          role="italic">dossier</emphasis> passera à côté de l'information qu'il
          recherche.
        </para>
        <para>
          L'index, s'il est bien réalisé, a alors toute son utilité. Seul
          problème&nbsp;: créer un bon index demande un effort important en
          toute fin de projet, juste avant l'heure de la livraison. Et fournir
          un mauvais index n'a aucun intérêt ni pour le client, ni pour
          l'entreprise.
        </para>
        <para>
          Un index est donc paradoxalement plus utile pour une bonne
          documentation que pour une mauvaise (du moins, une documentation dont
          la terminologie n'est pas cohérente). Mais son rapport coût/utilité
          est faible. C'est un luxe que l'entreprise peut rarement s'offrir,
          mais certainement pas le premier aspect qualitatif qu'il faut
          améliorer. Un index est la cerise sur le gâteau d'une documentation
          technique - le plus important reste le gâteau.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="les-trois-niveaux-de-la-documentation-technique"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section id="principe-de-simplicite-kiss">
      <title>Principe de simplicité KISS</title>
      <para>
        Le principe KISS (Keep it simple stupid), n'est pas spécifique à la
        rédaction technique. Il s'agit d'un principe général d'ingénierie, qui
        postule que tout objet matériel ou virtuel construit par l'homme est
        plus fiable et plus facile à maintenir et à faire évoluer si sa
        complexité est volontairement réduite. C'est le principe mis en exergue
        par antiphrase par les Shadocks&nbsp;: <emphasis role="italic">Pourquoi
        faire simple quand on peut faire compliqué</emphasis>&nbsp;?
      </para>
      <para>
        C'est ce principe qui a prévalu à la conception des montres <emphasis
        role="italic">Swatch</emphasis>, dont le cahier des charges stipulait
        qu'elles devaient embarquer deux fois moins de pièces que leurs
        consœurs. Résultat&nbsp;: des montres moins chères, plus fiables et
        disponibles en versions sans cesse renouvelées.
      </para>
      <para>
        Ce qui a spectaculairement fonctionné pour des montres peut être appliqué
        avec le même succès à la documentation technique. Quel que soit le format
        utilisé <footnote>
        <para>Même si les formats qui distinguent le contenu de la mise en page
        sont dans leur principe plus aptes à la mise en œuvre de la philosophie
        KISS.</para> </footnote>, le <emphasis role="bold">rédacteur
        technique</emphasis> peut tout aussi bien construire un document
        élégamment architecturé, qu'une usine à gaz. Avec <ulink
        url="http://dita.xml.org/">DITA XML</ulink>, il lui suffit de ne pas
        centraliser les <emphasis role="italic">conref</emphasis> ou de les
        imbriquer exagérément. Sous FrameMaker, c'est encore plus simple, peu de
        garde-fous étant posés&nbsp;: la multiplication des styles et des
        <emphasis role="italic">overrides</emphasis> peut rapidement rendre
        ingérable n'importe quel document.
      </para>
      <para>
        De même, dans la formulation de ses phrases, le
        <emphasis role="bold">rédacteur technique</emphasis>
        doit toujours avoir le principe KISS à l'esprit. Il est facile de
        construire des phrases alambiquées qui dénotent plus une mécompréhension
        du sujet qu'un raffinement de l'écriture <footnote>
        <para>Ce genre de phrase est d'ailleurs souvent impossible à
        traduire.</para> </footnote>. Construire une phrase simple demande un
        effort de compréhension de son sujet. La rédaction du contenu et son
        appréhension par son destinataire deviennent alors aisées. C'est un
        aspect fondamental du métier de <emphasis role="bold">rédacteur
        technique</emphasis>. Le <emphasis role="bold">rédacteur
        technique</emphasis> apporte ainsi une véritable valeur ajoutée au
        produit qu'il documente.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="diminuer-les-couts-ameliorer-la-satisfaction-client"/>
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="formats-et-outils">
      <title>Formats et outils</title>
      <para>
        Lorsqu'une entreprise décide d'industrialiser la rédaction technique,
        elle se pose d'emblée la question des outils. Or, plutôt que les outils,
        ce sont les formats sous-jacents qui sont le point essentiel.
      </para>
      <para>
        La plupart des éditeurs, afin de disposer d'un marché captif obligé de
        régulièrement payer des mises à jour de leurs produits, ont en effet
        développé des formats propriétaires que seuls leurs logiciels sont à
        même de modifier. Un fichier Word ou un fichier FrameMaker ne peuvent
        ainsi être modifiés que <emphasis role="italic">via</emphasis> les
        outils éponymes. Choisir un tel format risque donc de limiter les choix
        ultérieurs de l'entreprise et de se révéler coûteux&nbsp;: il faut une
        licence par utilisateur, qu'il soit <emphasis role="bold">rédacteur
        technique</emphasis>, contributeur occasionnel ou traducteur.
      </para>
      <figure>
        <title>Un format standard laisse le choix de l'outil</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../graphics/format-standard.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>
        Si l'on réfléchit en termes de formats, en revanche, il est possible de
        mettre en place des solutions évolutives. Un format ouvert tel que
        <ulink url="http://fr.wikipedia.org/wiki/OpenDocument">
        OpenDocument</ulink> ou <ulink
        url="http://fr.wikipedia.org/wiki/Darwin_Information_Typing_Architecture">
        DITA XML</ulink>, par exemple (seul le second étant un format industriel
        de rédaction technique), n'est pas lié à un outil donné. Il est donc
        possible de le modifier et de le manipuler à l'aide de différents
        logiciels. Les formats structurés de type DocBook et DITA XML liés à un
        schéma XSD normalisée peuvent notamment être facilement gérés, de la
        création à la publication, à l'aide de toute une panoplie d'outils, de
        l'éditeur de texte libre à la suite logicielle propriétaire et
        graphique.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="diminuer-les-couts-ameliorer-la-satisfaction-client"/>
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section id="redaction-technique-un-processus-industriel">
    <title>Rédaction technique&nbsp;: un processus industriel</title>
    <para>
      La rédaction technique repose sur des processus rationnels. Trop souvent
      associée à un fort aspect littéraire, elle est fréquemment laissée à
      l'improvisation et à l'inspiration du <emphasis role="bold">rédacteur
      technique</emphasis>. Le <emphasis role="bold">rédacteur
      technique</emphasis>, comme les autres intervenants de l'entreprise, doit
      répondre à ses objectifs de manière prévisible et reproductible.
    </para>
    <para>
      Ce processus repose sur une méthodologie rigoureuse et une chaîne de
      production fiable.
    </para>
    <figure>
      <title>Processus de rédaction technique</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../graphics/processus.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>
      Pour créer et valoriser un contenu à forte valeur ajoutée pour
      l'entreprise, le <emphasis role="bold">rédacteur technique</emphasis>
      dialogue constamment non seulement avec tous les acteurs internes de la
      société, mais aussi avec son écosystème&nbsp;: partenaires, journalistes,
      utilisateurs, etc. Il fournit ainsi aux différents publics l'information
      dont ils ont besoin. Ceci renforce l'image de marque de la société,
      améliore la satisfaction client et facilite la perception des avantages
      produit par les prospects. Le rédacteur technique s'appuie sur une chaîne
      de production aussi automatisée que possible. En mettant en place un
      processus industriel et reproductible, il diminue les coûts de production
      et fournit un niveau de qualité constant, adapté aux buts de l'entreprise.
    </para>
    <itemizedlist>
      <title>Related links</title>
      <listitem>
        <para>
          <xref linkend="definition-du-projet"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="collecte-information"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="creation-du-contenu"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="format-source"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="referentiel"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="validation-et-controle-qualite"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="traduction"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="format-cible"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="livraison"/>
        </para>
      </listitem>
    </itemizedlist>
    <section id="definition-du-projet">
      <title>Définition du projet</title>
      <para>
        Un projet de rédaction technique apporte une valeur ajoutée aux produits
        et aide l'entreprise à mieux commercialiser son offre sur son
        marché. Mais, comme pour les projets de R&amp;D ou de marketing, la
        définition du projet permet d'en estimer le budget et les retombées.
      </para>
      <para>
        Communiquer des informations techniques sans savoir à qui ni dans quel
        but est un effort vain. Avant d'initier un projet de rédaction technique
        et marketing, il est indispensable de clairement le définir. Il convient
        notamment de déterminer&nbsp;:
      </para>
      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>
                son objectif
              </entry>
              <entry>
                augmenter la notoriété de l'entreprise, accroître sa couverture
                médias, amener les prospects à prendre contact avec la société,
                réduire les coûts de support technique…
              </entry>
            </row>
            <row>
              <entry>
                sa cible
              </entry>
              <entry>
                grand public, journalistes, prospects, clients…
              </entry>
            </row>
            <row>
              <entry>
                sa forme
              </entry>
              <entry>
                livre blanc, mode d'emploi ou guide de l'utilisateur, brochure
                et flyer, site web, magazine d'entreprise, <emphasis
                role="italic">print</emphasis> ou <emphasis
                role="italic">online</emphasis>…
              </entry>
            </row>
            <row>
              <entry>
                sa langue
              </entry>
              <entry>
              </entry>
            </row>
            <row>
              <entry>
                son mode de diffusion
              </entry>
              <entry>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        L'analyse des résultats du projet donne ensuite de précieux
        renseignements pour améliorer encore l'impact des projets suivants.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="redaction-technique-un-processus-industriel"/>
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="collecte-information">
      <title>Collecte de l'information</title>
      <para>
        Le <emphasis role="bold">rédacteur technique</emphasis> collecte
        l'information auprès de différentes sources, internes et externes à
        l'entreprise.
      </para>
      <para>
        Une fois le projet de rédaction technique clairement défini, le
        <emphasis role="bold">rédacteur technique</emphasis> collecte toute
        l'information disponible&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            spécifications du produit, Intranet, pages <ulink
            url="http://trac.edgewall.org/">Trac</ulink>,
          </para>
        </listitem>
        <listitem>
          <para>
            interview du service R&amp;D,
          </para>
        </listitem>
        <listitem>
          <para>
            manipulation du produit,
          </para>
        </listitem>
        <listitem>
          <para>
            interview du service marketing,
          </para>
        </listitem>
        <listitem>
          <para>
            interview de clients,
          </para>
        </listitem>
        <listitem>
          <para>
            analyse de la concurrence,
          </para>
        </listitem>
        <listitem>
          <para>
            lecture de la presse spécialisée.
          </para>
        </listitem>
      </itemizedlist>
      <figure>
        <title>Collecte de l'information</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../graphics/collecte.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>
        Les informations doivent être recoupées pour minimiser le risque de
        transmettre des informations erronées ou plus à jour. Le rédacteur
        technique doit se livrer à un véritable travail d'enquête. En se mettant
        à la place de l'utilisateur, il vérifie chaque information et fait le
        tri entre les données pertinentes et celles qui ne seront que du bruit
        perturbant le message.
      </para>
      <para>
        Premier utilisateur des solutions développées par la société, le
        rédacteur technique a le rôle du candide qui remet chaque aspect de
        l'information à transmettre dans son contexte. Il peut par exemple
        décider, contre l'avis de la direction technique, de passer sous silence
        des informations très techniques dans le guide de
        l'utilisateur. Inversement, il pourra étayer une brochure commerciale de
        données techniques précises pour étayer le discours marketing.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="redaction-technique-un-processus-industriel"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="tester-les-produits-pour-les-documenter"/>
          </para>
        </listitem>
      </itemizedlist>
      <section id="tester-les-produits-pour-les-documenter">
        <title>Tester les produits pour les documenter</title>
        <para>
          Le <emphasis role="bold">rédacteur technique</emphasis> ne peut
          fournir une documentation utile aux clients de l'entreprise s'il se
          contente de mettre en forme des informations glanées auprès des
          différents acteurs de la société. Jouant le rôle de Candide, il est le
          premier représentant des utilisateurs et se doit de tester les
          produits dans des conditions proches des leurs.
        </para>
        <para>
          Un conte chinois narre comment des aveugles se sont retrouvés
          confrontés à un éléphant. Aucun d'entre eux, et pour cause, n'ayant
          une perception globale de l'animal, chacun en eut une image
          différente&nbsp;: celui qui en tenait une patte le prenait pour un
          arbre, celui qui en étreignait la trompe le confondait avec un
          serpent, celui qui avait empoigné une défense l'identifiait à une
          lance, et celui qui s'agrippait à une de ses oreilles croyait qu'il
          s'agissait d'un éventail.
        </para>
        <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/hanabusa-itcho.jpg"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
        <para>
          Le <emphasis role="bold">rédacteur technique</emphasis> qui demande
          aux différents intervenants de l'entreprise à quoi sert le produit
          dont il doit créer la documentation et comment il fonctionne se
          retrouve comme celui qui demande aux aveugles à quoi ressemble un
          éléphant&nbsp;: pour la R&amp;D, il s'agit de code élégamment rédigé,
          pour le marketing, d'une offre à positionner face à la concurrence sur
          son marché, pour le support technique, d'un exécutable dont il faut
          corriger les bugs, etc.
        </para>
        <para>
          Pour avoir une vision réaliste de l'objet qu'il est censé décrire, le
          <emphasis role="bold">rédacteur technique</emphasis> doit donc
          l'appréhender par lui-même et se faire sa propre opinion, qu'il pourra
          ensuite confronter à celle des autres acteurs de l'entreprise. Le
          <emphasis role="bold">rédacteur technique</emphasis> est un
          pragmatique qui s'intéresse à la pratique, non à la théorie. S'il ne
          consulte que les développeurs, par exemple, il aura peu de chance de
          pouvoir créer une documentation satisfaisante pour
          l'utilisateur&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              d'une part, les développeurs ont souvent une vision idéaliste du
              fonctionnement de leur produit, différente du comportement de ce
              dernier en conditions réelles d'utilisation,
            </para>
          </listitem>
          <listitem>
            <para>
              d'autre part, une déperdition d'information se produit
              nécessairement entre&nbsp;:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  ce que le développeur sait,
                </para>
              </listitem>
              <listitem>
                <para>
                  ce que le développeur exprime,
                </para>
              </listitem>
              <listitem>
                <para>
                  ce que le <emphasis role="bold">rédacteur technique</emphasis>
                  comprend,
                </para>
              </listitem>
              <listitem>
                <para>
                  ce que le <emphasis role="bold">rédacteur technique</emphasis>
                  rédige,
                </para>
              </listitem>
              <listitem>
                <para>
                  ce que l'utilisateur comprend.
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
        <para>
          Si le <emphasis role="bold">rédacteur technique</emphasis> teste
          réellement le comportement du produit dans des conditions aussi
          proches que possible de celles rencontrées par l'utilisateur, les
          trois premières causes de déperdition d'information sont quasiment
          inexistantes. Pour réduire les deux dernières, il ne lui reste plus
          qu'à filtrer, organiser et exprimer l'information qu'il a recueillie
          de manière adaptée au média qui la véhiculera et aux connaissances
          techniques de son destinataire.
        </para>
        <para>
          Dans les faits, une telle demande peut sembler de prime abord
          incongrue en interne et se heurter à la lourdeur de la mise en place
          d'une plateforme de test. Ce n'est généralement qu'après les premiers
          retours clients ou les tests produits dans la presse que les
          différents interlocuteurs comprennent pleinement l'apport de cette
          démarche. C'est souvent seulement à partir de ce moment là que la
          rédaction technique gagne ses lettres de noblesse. Et que la
          documentation technique n'est plus seulement vue comme un mal
          nécessaire, mais comme une véritable valeur ajoutée.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="collecte-information"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section id="creation-du-contenu">
      <title>Création du contenu</title>
      <para>
        Le <emphasis role="bold">rédacteur technique</emphasis> crée le contenu
        du projet de rédaction technique dans un dialogue constant avec les
        différents acteurs de la société&nbsp;: services R&amp;D, marketing. Il
        prend en compte en amont les différentes contraintes liées au cycle de
        vie des supports de rédaction technique.
      </para>
      <para>
        En particulier, le <emphasis role="bold">rédacteur technique</emphasis>
        a soin de&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            faire valider le contenu à ses interlocuteurs afin d'apporter les
            modifications nécessaires aussi tôt que possible&nbsp;; ceci
            garantit que le résultat sera conforme au projet initialement
            défini,
          </para>
        </listitem>
        <listitem>
          <para>
            minimiser le volume de texte et d'images sources afin de réduire les
            coûts de production, de maintenance et de traduction,
          </para>
        </listitem>
        <listitem>
          <para>
            prendre en compte dès le début du projet les contraintes
            d'internationalisation.
          </para>
        </listitem>
      </itemizedlist>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="redaction-technique-un-processus-industriel"/>
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="format-source">
      <title>Format source</title>
      <para>
        Le contenu d'un projet de rédaction technique est créé dans un format
        source, différent du format des livrables, le format cible. Pour
        reprendre une image fréquemment utilisée en développement logiciel, le
        format source est la recette de cuisine, le format cible, le plat. En
        photographie, le format source est le format <ulink
        url="http://fr.wikipedia.org/wiki/RAW_(format_d%27image)">RAW</ulink>,
        qui est généré par l'appareil photo, et sur lequel les photographes
        professionnels préféreront apporter les retouches, et le format cible,
        le format JPEG.
      </para>
      <para>
        Les traitements de texte nous ont déshabitués à distinguer le fond de la
        forme. Mais confondre les deux entraîne beaucoup d'erreurs et de perte
        de temps.
      </para>
      <para>
        En effet, le document présenté à l'utilisateur présente deux aspects
        fondamentaux&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            le contenu,
          </para>
        </listitem>
        <listitem>
          <para>
            la mise en page.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Au cours du développement d'une documentation technique, ces deux
        aspects doivent être clairement distincts. Ils peuvent être pris en
        charge par deux intervenants différents&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            le <emphasis role="bold">rédacteur technique</emphasis>,
          </para>
        </listitem>
        <listitem>
          <para>
            le graphiste <footnote>
            <para>Si le <emphasis role="bold">rédacteur technique</emphasis> met
            lui-même en page ses documents, il change de rôle lorsqu'il effectue
            cette opération.</para>
            </footnote>.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Lorsque la mise en page a une importance équivalente à celle du contenu,
        ou lorsqu'elle doit être variée, comme dans le cas d'une brochure
        commerciale, la rédaction et la mise en page s'opèrent sous des outils
        différents&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            éditeur de texte,
          </para>
        </listitem>
        <listitem>
          <para>
            logiciel de PAO, par exemple InDesign ou Scribus.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Lorsque la mise en page a une importance moindre que celle du contenu,
        ou lorsqu'elle doit être homogène, comme dans le cas d'une documentation
        technique, la rédaction et la mise en page s'opèrent sur&nbsp;:
      </para>
      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>
                les mêmes fichiers&nbsp;:
              </entry>
              <entry>
                par exemple, des fichiers FrameMaker,
              </entry>
            </row>
            <row>
              <entry>
                des fichiers différents&nbsp;:
              </entry>
              <entry>
                par exemple, des fichiers de contenu XML et une feuille de style
                XSLT.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Dans un fichier FrameMaker, la séparation du fond et de la forme est
        élevée mais pas totale&nbsp;: le contenu et la mise en page sont placés
        dans le même fichier. FrameMaker applique une maquette de page homogène
        à tout un fichier, mais autorise l'ajout manuel d'éléments de mise en
        page. La même maquette peut être dupliquée pour tout le document, ou une
        maquette différente peut être utilisée pour chaque fichier qui compose
        ce dernier.
      </para>
      <figure>
        <title>Formats sources&nbsp;: degré de modularité et format</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../graphics/modulaire-texte-monolithique-binaire.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>
        Les formats sources peuvent être classés selon leur degré de modularité
        et leur format de fichier.
      </para>
      <para>
        Les formats XML structurés DocBook et DITA appliquent une maquette de
        page homogène à tout un document, et n'autorisent pas l'ajout manuel
        d'éléments de mise en page <footnote> <para>Ou très peu&nbsp;: dans les
        fichiers de contenu, il est seulement possible de mettre du texte en
        gras ou en italique, pas d'en changer la police, le corps ou la
        couleur.</para> </footnote>, ni l'application de maquettes différentes
        aux différents fichiers qui composent le document.
      </para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>
                Format
              </entry>
              <entry>
                Application d'une mise en page homogène
              </entry>
              <entry>
                Possibilité de mise en page manuelle
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                MS Word
              </entry>
              <entry>
                Non
              </entry>
              <entry>
                Oui
              </entry>
            </row>
            <row>
              <entry>
                FrameMaker
              </entry>
              <entry>
                Oui
              </entry>
              <entry>
                Oui
              </entry>
            </row>
            <row>
              <entry>
                DITA XML
              </entry>
              <entry>
                Oui
              </entry>
              <entry>
                Non
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Si contenu et mise en page sont intimement liés, comme sous un
        traitement de texte, il est difficile de modifier le contenu sans
        perturber la mise en page. Résultat&nbsp;: à chaque publication d'une
        nouvelle version d'une documentation technique, l'équipe de rédaction
        technique passe de longues heures à corriger les erreurs de mise en page
        générées par le logiciel. Le phénomène est moindre sous FrameMaker mais
        reste important. Il est nul avec les formats <emphasis role="italic">XML
        DITA</emphasis> et <emphasis role="italic">DocBook</emphasis> (les
        seules erreurs qui peuvent se produire sont des erreurs de compilation
        dues à une syntaxe XML erronée&nbsp;; ces erreurs sont facilement
        rectifiables).
      </para>
      <para>
        Les fichiers sources d'une documentation technique sont au format&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            binaire ou,
          </para>
        </listitem>
        <listitem>
          <para>
            texte.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Ce format est également&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            WYSIWYG ou,
          </para>
        </listitem>
        <listitem>
          <para>
            structuré.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Enfin, ce format est&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            modulaire ou,
          </para>
        </listitem>
        <listitem>
          <para>
            monolithique.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Ce dernier aspect détermine la manière dont le format gère le <emphasis
        role="italic">single-sourcing</emphasis>&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            selon une logique <emphasis role="italic">livre vers aide en
            ligne</emphasis> ou,
          </para>
        </listitem>
        <listitem>
          <para>
            selon une logique <emphasis role="italic">aide en ligne vers livre</emphasis>.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Les formats disponibles peuvent donc être classés selon le tableau
        suivant&nbsp;:
      </para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry>
                Format
              </entry>
              <entry>
                Texte
              </entry>
              <entry>
                Structuré
              </entry>
              <entry>
                Modulaire
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                FrameMaker natif
              </entry>
              <entry>
                Non
              </entry>
              <entry>
                Non
              </entry>
              <entry>
                Limité
              </entry>
            </row>
            <row>
              <entry>
                DocBook
              </entry>
              <entry>
                Oui
              </entry>
              <entry>
                Oui
              </entry>
              <entry>
                Limité
              </entry>
            </row>
            <row>
              <entry>
                DITA XML
              </entry>
              <entry>
                Oui
              </entry>
              <entry>
                Oui
              </entry>
              <entry>
                Oui
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        FrameMaker et DocBook ne sont pas pleinement modulaires, car les plus
        petits éléments d'information manipulables ne sont pas génériques&nbsp;:
        ils contiennent des informations telles que la structure de table des
        matières ou les références croisées qui ne sont valables que dans un
        nombre limité de contextes.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="redaction-technique-un-processus-industriel"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="documents-monolithiques-ou-modulaires"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="fichiers-binaires-ou-texte"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="sed-modifiez-votre-texte-sans-ouvrir-vos-fichiers"/>
          </para>
        </listitem>
      </itemizedlist>
      <section id="documents-monolithiques-ou-modulaires">
        <title>Documents monolithiques ou modulaires</title>
        <para>
          Le format source peut reposer sur des <emphasis role="italic">fichiers
          monolithiques</emphasis> ou sur des <emphasis role="italic">grappes de
          fichiers modulaires</emphasis>.
        </para>
        <para>
          Les <emphasis role="italic">fichiers monolithiques</emphasis> (par
          exemple Word, LibreOffice ou Framemaker) centralisent tout le contenu
          dans un seul fichier, facile à manier, mais qui limite le partage du
          contenu&nbsp;; le risque de disposer d'informations incohérentes ou en
          doublon est alors important.
        </para>
        <figure>
          <title>Format source de rédaction technique monolithique</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/monolithique.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>
          Les <emphasis role="italic">grappes de fichiers modulaires</emphasis>
          (par exemple <ulink url="http://dita.xml.org/">DITA XML</ulink> ou
          <ulink url="http://www.docbook.org/">DocBook</ulink>) agrègent le
          contenu de multiples fichiers, ce qui favorise le partage et la
          réutilisation de blocs de contenu. Un tel système est difficile à
          mettre en place au niveau de toute l'entreprise, mais devrait être la
          norme pour une équipe de rédaction technique.
        </para>
        <figure>
          <title>Format source de rédaction technique modulaire</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/grappe.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>
          Certains traitements de texte proposent de gérer des documents
          modulaires, mais ils le font mal. Inversement, un document DocBook ou
          DITA, par exemple, peut être monolithique, mais perd alors de sa
          souplesse.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="format-source"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="quest-ce-quun-module-dinformation"/>
            </para>
          </listitem>
        </itemizedlist>
        <section id="quest-ce-quun-module-dinformation">
          <title>Qu'est-ce qu'un module d'information&nbsp;?</title>
          <para>
            Le système modulaire le plus connu au monde est certainement celui
            des briques Lego. Adapté à la documentation technique, le principe
            des modules permet d'améliorer la qualité des manuels techniques et
            la productivité du <emphasis role="bold">rédacteur
            technique</emphasis>.
          </para>
          <para>
            Mais suffit-il de convertir sa documentation de FrameMaker vers un
            format structuré tel que DITA XML pour obtenir une documentation
            modulaire&nbsp;?  Hélas, non. Si le contenu de départ mélange les
            informations de tout type (concepts, procédures pas à pas,
            référence), il sera toujours possible de le convertir au format DITA
            en ne respectant pas rigoureusement la sémantique DITA. Voire en
            modifiant les feuilles de style XSLT ou en spécialisant les XSD pour
            les rendre plus laxistes.
          </para>
          <para>
            Or, si l'on obtient au final un document se basant sur des fichiers
            correpondant chacun à un schéma XSD différent (<emphasis
            role="italic">concept</emphasis>, <emphasis
            role="italic">task</emphasis>, ou <emphasis
            role="italic">reference</emphasis>), on n'obtient pas forcément
            ainsi une véritable documentation modulaire. En effet, essayez de
            construire alors un document ne regroupant que les fichiers d'un
            seul type&nbsp;: votre document aura toutes les chances d'être
            incomplet et incohérent.
          </para>
          <para>
            Cette documentation n'est pas modulaire, car elle ne repose pas sur
            de véritables modules d'information. Un module est un élément
            atomique complet et cohérent qui peut être réutilisé dans différents
            contextes. Si vous avez divisé votre document monolithique original
            en une multitude de fichiers, vous n'avez pas encore créé de modules
            d'information. La seconde étape consiste à ré-écrire chaque fichier
            (selon par exemple l'approche minimaliste) pour le rendre plus
            générique et en faire un véritable module. Il faut évidemment
            adopter une approche structuraliste et décider du contenu de chaque
            module dans la perspective de l'architecture documentaire
            globale. De même, des mentions telles que <emphasis
            role="italic">Voir la section suivante</emphasis> devront être
            remplacées par des reférences croisées. Idéalement, ces références
            croisées ne se situent pas dans les fichiers de contenu proprement
            dit sous la forme&nbsp;:
          </para>
          <programlisting>
            &lt;related-links&gt;
            &lt;link href="content.dita#content"/&gt;
            &lt;/related-links&gt;
          </programlisting>
          <para>
            mais dans une section <emphasis role="italic">reltable</emphasis>
            propre à chaque fichier <emphasis role="italic">ditamap</emphasis>.
          </para>
          <para>
            Les modules sont ainsi parfaitement décontextualisés, et les
            informations de structure telles que les références croisées sont
            placés dans des fichiers ne comportant pas de contenu textuel.
          </para>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="documents-monolithiques-ou-modulaires"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
      <section id="fichiers-binaires-ou-texte">
        <title>Fichiers binaires ou texte</title>
        <para>
          Les formats sources sont des formats <emphasis
          role="italic">binaires</emphasis> ou <emphasis
          role="italic">texte</emphasis>.
        </para>
        <informaltable>
          <tgroup cols="2">
            <tbody>
              <row>
                <entry>
                  Les formats binaires sont <emphasis
                  role="italic">opaques</emphasis>&nbsp;:
                </entry>
                <entry>
                  si on les ouvre avec un éditeur de texte de type <emphasis
                  role="italic">notepad</emphasis>, tout ce que l'on voit est
                  une suite de caractères hiéroglyphiques&nbsp;; il n'est donc
                  la plupart du temps possible de les modifier qu'avec un seul
                  logiciel.
                </entry>
              </row>
              <row>
                <entry>
                  Les formats texte sont <emphasis
                  role="italic">transparents</emphasis>&nbsp;:
                </entry>
                <entry>
                  si on les ouvre avec un éditeur de texte, on voit du texte et
                  des balises&nbsp;; il est donc possible de les modifier avec
                  différents logiciels et de leur appliquer des opérations de
                  traitement par lot en ligne de commande, sans même les ouvrir,
                  et d'utiliser de puissantes <ulink
                  url="http://fr.wikipedia.org/wiki/Expression_rationnelle">
                  expressions rationnelles</ulink>.
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="format-source"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="sed-modifiez-votre-texte-sans-ouvrir-vos-fichiers">
        <title>sed&nbsp;: modifiez votre texte sans ouvrir vos fichiers</title>
        <para>
          Les clones d'Unix sont peu utilisés pour gérer la documentation
          technique. Ceci est étrange si l'on songe à la pléthore d'outils
          disponibles sous ces plateformes pour manipuler du texte dans tous les
          sens.
        </para>
        <para>
          Prenons l'exemple du dialogue entre entre M. Jourdain et son maître de
          philosophie, dans le <emphasis role="italic">Bourgeois
          gentilhomme</emphasis> de Molière&nbsp;:
        </para>
        <para>
          MONSIEUR JOURDAIN&nbsp;:
        </para>
        <para>
          [...] Je voudrais donc lui mettre dans un billet&nbsp;: « Belle
          marquise, vos beaux yeux me font mourir d'amour »&nbsp;; mais je
          voudrais que cela fût mis d'une manière galante, que cela fût tourné
          gentiment.
        </para>
        <para>
          [...]
        </para>
        <para>
          MAÎTRE DE PHILOSOPHIE&nbsp;:
        </para>
        <para>
          On les peut mettre premièrement comme vous avez dit&nbsp;: Belle
          marquise, vos beaux yeux me font mourir d'amour. Ou bien&nbsp;:
          D'amour mourir me font, belle marquise, vos beaux yeux.  Ou
          bien&nbsp;: Vos yeux beaux d'amour me font, belle marquise, mourir. Ou
          bien&nbsp;: Mourir vos beaux yeux, belle marquise, d'amour me font. Ou
          bien&nbsp;: Me font vos yeux beaux mourir, belle marquise, d'amour.
        </para>
        <para>
          Commençons par afficher la phrase d'origine dans un terminal&nbsp;:
        </para>
        <programlisting>
          $ echo "Belle marquise, vos beaux yeux me font mourir d'amour."
          Belle marquise, vos beaux yeux me font mourir d'amour.
        </programlisting>
        <para>
          Il s'agit maintenant d'intervertir les mots de la phrase, pour en
          créer une nouvelle. Pour une simple transposition, on pourrait juger
          plus facile d'utiliser <emphasis role="italic">awk</emphasis>.
          <emphasis role="italic">awk</emphasis> ne gère en effet pas des
          lignes, mais des <emphasis role="italic">champs</emphasis> d'un
          <emphasis role="italic">enregistrement</emphasis> (d'une ligne),
          délimités par défaut par des espaces. Autrement dit, <emphasis
          role="italic">awk</emphasis> traite le texte comme une base de
          données.  Il peut facilement afficher toute la ligne, ou seulement un
          ou plusieurs champs, dans l'ordre souhaité. Les champs sont indiqués
          sous la forme <emphasis role="italic">$n</emphasis>, où n indique la
          position du champ dans la ligne, à partir de la gauche. Ainsi
          <emphasis role="italic">$1</emphasis> indique le premier champ,
          <emphasis role="italic">$2</emphasis> le dernier, etc. <emphasis
          role="italic">$0</emphasis> correspond à toute la ligne.
        </para>
        <para>
          Nous allons donc donner la déclaration d'amour de M. Jourdain en
          entrée d'un programme <emphasis role="italic">awk</emphasis> d'une
          ligne, grâce au symbole de redirection <emphasis
          role="italic">pipeline</emphasis> (|).
        </para>
        <programlisting>
          $ echo "Belle marquise, vos beaux yeux me font mourir d'amour." | \
          awk  '{print $9" "$8" "$6" "$7" "$1" "$2" "$3" "$4" "$5}'
          d'amour. mourir me font Belle marquise, vos beaux yeux
        </programlisting>
        <para>
          La sortie de la commande <emphasis role="italic">echo</emphasis> n'est
          pas affichée. Ce qui est affiché, c'est la sortie du programme
          <emphasis role="italic">awk</emphasis>, dont la sortie de la commande
          <emphasis role="italic">echo</emphasis>, soit la déclaration d'amour
          de M.  Jourdain, était l'entrée.
        </para>
        <para>
          La sortie finale ne correspond cependant pas à ce que l'on
          souhaitait. Les <emphasis role="italic">champs</emphasis> ne
          correspondent pas trait pour trait à des mots. Il faudrait donc
          raffiner la commande <emphasis role="italic">awk</emphasis>.
        </para>
        <para>
          Il est plus simple de se tourner vers <emphasis
          role="italic">sed</emphasis>.  <emphasis role="italic">sed</emphasis>
          sélectionne dans des lignes des ensembles de caractères cités
          littéralement, ou <emphasis role="italic">via</emphasis> des
          méta-caractères dans des <emphasis role="italic">expressions
          rationnelles</emphasis> (ou <emphasis role="italic">expressions
          régulières</emphasis>). Un méta-caractère connu des expressions
          rationnelles est le signe *, indiquant, en ligne de commande, zéro ou
          un nombre indéfini de caractères, comme dans&nbsp;:
        </para>
        <programlisting>
          $ ls *.rst
        </programlisting>
        <para>
          <emphasis role="italic">sed</emphasis> gère également des <emphasis
          role="italic">références arrières</emphasis>, qui affichent à
          l'endroit où on le souhaite la valeur correspondant à une expression
          littérale ou rationnelle trouvée auparavant. Heureusement pour nous,
          la déclaration d'amour de M. Jourdain contient exactement neuf mots,
          ce qui correspond au nombre maximal de références arrières possibles.
        </para>
        <programlisting>
          $ echo "Belle marquise, vos beaux yeux me font mourir d'amour." | \
          sed "s#\(.*\) \(.*\), \(.*\) \(.*\) \(.*\) \(.*\) \(.*\) \(.*\) \(d'.*\)#\9 \8 \6 \7, \1 \2, \3 \4 \5#"
          d'amour. mourir me font, Belle marquise, vos beaux yeux
        </programlisting>
        <para>
          Nous buttons sur le même problème&nbsp;: l'expression régulière .* ne
          correspond pas à un mot, mais à une suite de caractères, ponctuation
          comprise. Il faut alors utiliser la forme &lt;.*&gt;, qui correspond à
          un mot tel que ceux dont M. Jourdain se sert pour faire de la
          prose. Nous allons utiliser les caractères d'échappement (barre
          oblique inverse \) pour que les signes &lt; et &gt; ne soient pas
          interprétés littéralement sous certaines consoles, mais comme des
          méta-caractères ayant une fonction spéciale&nbsp;:
        </para>
        <programlisting>
          $ echo "Belle marquise, vos beaux yeux me font mourir d'amour." | \
          sed "s#\(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\), \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(d'\&lt;.*\&gt;\)#\9 \8 \6 \7, \1 \2, \3 \4 \5#"
          d'amour mourir me font, Belle marquise, vos beaux yeux.
        </programlisting>
        <para>
          Nous pourrions également utiliser la forme [[:alpha:]]* qui fait
          gagner en lisibilité, mais perdre en concision&nbsp;:
        </para>
        <programlisting>
          $ echo "Belle marquise, vos beaux yeux me font mourir d'amour." | \
          sed "s#\([[:alpha:]]*\) \([[:alpha:]]*\), \([[:alpha:]]*\) \([[:alpha:]]*\) \([[:alpha:]]*\) \([[:alpha:]]*\) \([[:alpha:]]*\) \([[:alpha:]]*\) \(d'[[:alpha:]]*\)#\9 \8 \6 \7, \1 \2, \3 \4 \5#"
          d'amour mourir me font, Belle marquise, vos beaux yeux.
        </programlisting>
        <para>
          C'est mieux, mais nous avons un problème de capitalisation. Nous
          allons donc utiliser les opérateurs /u et /l placés judicieusement.
          Auparavant, nous allons exporter des variables pour rendre le script
          plus concis et plus lisible&nbsp;:
        </para>
        <programlisting>
          $ export w="\(\&lt;.*\&gt;\)"
          $ export mots="$w $w, $w $w $w $w $w $w"
        </programlisting>
        <programlisting>
          $ echo "Belle marquise, vos beaux yeux me font mourir d'amour." | \
          sed "s#$mots \(d'\&lt;.*\&gt;\)#\u\9 \8 \6 \7, \l\1 \2, \3 \4 \5#"
          D'amour mourir me font, belle marquise, vos beaux yeux.
        </programlisting>
        <para>
          Nous pouvons maintenant facilement redistribuer les références
          arrières pour obtenir toutes les variations du maître de
          philosophie&nbsp;:
        </para>
        <programlisting>
          $ echo "Belle marquise, vos beaux yeux me font mourir d'amour." | \
          sed "s#$mots \(d'\&lt;.*\&gt;\)#\u\3 \5 \4 \9 \6 \7, \l\1 \2, \8#"
          Vos yeux beaux d'amour me font, belle marquise, mourir.
        </programlisting>
        <programlisting>
          $ echo "Belle marquise, vos beaux yeux me font mourir d'amour." | \
          sed "s#$mots \(d'\&lt;.*\&gt;\)#\u\8 \3 \4 \5, \l\1 \2, \9 \6 \7#"
          Mourir vos beaux yeux, belle marquise, d'amour me font.
        </programlisting>
        <programlisting>
          $ echo "Belle marquise, vos beaux yeux me font mourir d'amour." | \
          sed "s#$mots \(d'\&lt;.*\&gt;\)#\u\6 \7 \3 \5 \4 \8, \l\1 \2, \9#"
          Me font vos yeux beaux mourir, belle marquise, d'amour.
        </programlisting>
        <sidebar>
          <title id="moliere-et-gnulinux">Molière et GNU/Linux</title>
          <para>
            Réécrivons le dialogue de M. Jourdain et de son maître de
            philosophie en style <emphasis role="italic">geek</emphasis>&nbsp;:
          </para>
          <para>
            MONSIEUR JOURDAIN&nbsp;:
          </para>
          <para>
            Je voudrais donc lui afficher sur la sortie standard&nbsp;:
          </para>
          <programlisting>
            $ Belle marquise, vos beaux yeux me font mourir d'amour.
          </programlisting>
          <para>
            Mais je voudrais que cela fût mis d'une manière galante, que cela
            fût tourné gentiment.
          </para>
          <para>
            MAÎTRE DE PHILOSOPHIE&nbsp;:
          </para>
          <para>
            On les peut mettre premièrement comme vous avez dit&nbsp;:
          </para>
          <programlisting>
            $ echo "Belle marquise, vos beaux yeux me font mourir d'amour."
          </programlisting>
          <para>
            Ou bien&nbsp;:
          </para>
          <programlisting>
            $ export declaration="Belle marquise, vos beaux yeux me font mourir d'amour."
            $ echo $declaration
          </programlisting>
          <para>
            Ou bien&nbsp;:
          </para>
          <programlisting>
            $ export w="\(\&lt;.*\&gt;\)"
            $ export mots="$w $w, $w $w $w $w $w $w"
            $ echo $declaration | \
            sed "s#$mots \(d'\&lt;.*\&gt;\)#\u\9 \8 \6 \7, \l\1 \2, \3 \4 \5#"
          </programlisting>
          <para>
            Ou bien&nbsp;:
          </para>
          <programlisting>
            $ echo $declaration | \
            sed "s#$mots \(d'\&lt;.*\&gt;\)#\u\3 \5 \4 \9 \6 \7, \l\1 \2, \8#"
          </programlisting>
          <para>
            Ou bien&nbsp;:
          </para>
          <programlisting>
            $ echo $declaration | \
            sed "s#$mots \(d'\&lt;.*\&gt;\)#\u\8 \3 \4 \5, \l\1 \2, \9 \6 \7#"
          </programlisting>
          <para>
            Ou bien&nbsp;:
          </para>
          <programlisting>
            $ echo $declaration | \
            sed "s#$mots \(d'\&lt;.*\&gt;\)#\u\6 \7 \3 \5 \4 \8, \l\1 \2, \9#"
          </programlisting>
        </sidebar>
        <sidebar>
          <title id="beaucoup-efforts">Beaucoup d'efforts…</title>
          <para>
            Certes, beaucoup d'efforts pour pas grand chose, me direz-vous.
            Mais imaginons un fichier qui contiennent 1000 phrases de la même
            structure&nbsp;:
          </para>
          <para>
            Cher docteur, ces grands malheurs vous font pleurer
            d'amertume. Petit garçon, cette bonne glace te fait saliver
            d'envie. Vaste océan, la forte houle te fait tanguer d'ivresse.
          </para>
          <para>
            Ceci est en l'occurrence peu probable, mais il est en revanche
            monnaie courante de trouver dans la documentation technique des
            phrases de même structure, pour des raisons d'homogénéité
            stylistique.
          </para>
          <para>
            Pour effectuer nos tests sur un échantillon, plaçons les trois
            phrases précédentes dans un fichier&nbsp;:
          </para>
          <programlisting>
            $ echo "Cher docteur, ces grands malheurs vous font pleurer d'amertume." &gt; variations.txt
            $ echo "Petit garçon, cette bonne glace te fait saliver d'envie." &gt;&gt; variations.txt
            $ echo "Vaste océan, la forte houle te fait tanguer d'ivresse." &gt;&gt; variations.txt
          </programlisting>
          <para>
            Plaçons les différentes commandes <emphasis
            role="italic">sed</emphasis> dans un script différent chacune&nbsp;:
          </para>
          <programlisting>
            $ echo "s#\(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\), \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(d'\&lt;.*\&gt;\)#\u\9 \8 \6 \7, \l\1 \2, \3 \4 \5#" &gt; moliere1.sed
            $ echo "s#\(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\), \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(d'\&lt;.*\&gt;\)#\u\3 \5 \4 \9 \6 \7, \l\1 \2, \8#" &gt; moliere2.sed
            $ echo "s#\(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\), \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(d'\&lt;.*\&gt;\)#\u\8 \3 \4 \5, \l\1 \2, \9 \6 \7#" &gt; moliere3.sed
            $ echo "s#\(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\), \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(\&lt;.*\&gt;\) \(d'\&lt;.*\&gt;\)#\u\6 \7 \3 \5 \4 \8, \l\1 \2, \9#" &gt; moliere4.sed
          </programlisting>
          <para>
            Exécutons maintenant en boucle tous les scripts <emphasis
            role="italic">sed</emphasis> sur toutes les lignes du fichier&nbsp;:
          </para>
          <programlisting>
            $ for (( i=1; i&lt;5; i++ )); do
            while read s; do echo "$s" | sed -f moliere$i.sed&nbsp;; done &lt; variations.txt
            done
            D'amertume pleurer vous font, cher docteur, ces grands malheurs.
            D'envie saliver te fait, petit garçon, cette bonne glace.
            D'ivresse tanguer te fait, vaste océan, la forte houle.
            Ces malheurs grands d'amertume vous font, cher docteur, pleurer.
            Cette glace bonne d'envie te fait, petit garçon, saliver.
            La houle forte d'ivresse te fait, vaste océan, tanguer.
            Pleurer ces grands malheurs, cher docteur, d'amertume vous font.
            Saliver cette bonne glace, petit garçon, d'envie te fait.
            Tanguer la forte houle, vaste océan, d'ivresse te fait.
            Vous font ces malheurs grands pleurer, cher docteur, d'amertume.
            Te fait cette glace bonne saliver, petit garçon, d'envie.
            Te fait la houle forte tanguer, vaste océan, d'ivresse.
          </programlisting>
          <para>
            Et voilà. En quelques instants, sans jamais ouvrir un seul fichier,
            nous appliquons une suite d'opérations complexes sur un nombre
            indéfini de phrases de même structure. Ce qui n'est pas possible
            sous un traitement de texte ou autre outil muni d'une interface
            graphique, ou sur des fichiers binaires.
          </para>
        </sidebar>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="format-source"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section id="referentiel">
      <title>Référentiel</title>
      <para>
        Le contenu est le capital immatériel de la société et doit être protégé
        comme tel. Il peut être géré dans différents référentiels&nbsp;:
        répertoires, mais aussi outils de gestion de contenu d'entreprise et
        logiciels de gestion de versions.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="redaction-technique-un-processus-industriel"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="git-du-fichier-au-contenu"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="quel-referentiel-pour-le-travail-de-groupe"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="repertoires-reseau-partages-peu-adaptes-au-travail-de-groupe"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="systemes-de-gestion-de-versions-rustiques-mais-fiables"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="les-cms-le-workflow-en-prime-mais-une-fiabilite-a-tester"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="base-de-donnees-sql"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="un-referentiel-unique"/>
          </para>
        </listitem>
      </itemizedlist>
      <section id="git-du-fichier-au-contenu">
        <title>Git&nbsp;: du fichier au contenu</title>
        <para>
          Vous êtes habitué à manipuler des fichiers&nbsp;? Git vous invite à
          penser autrement. Avantage&nbsp;: vous avez une maîtrise beaucoup plus
          grande de votre contenu.
        </para>
        <para>
          Qu'est-ce qu'un fichier&nbsp;? Pour vous, un contenu, image, texte,
          feuille de calcul ou autre, identifié par un nom. Pour votre système
          d'exploitation, une suite de bits sur le disque dur à laquelle sont
          associés un nom de fichier et un chemin de répertoires. Si vous
          souhaitez gérer votre projet en termes de fichiers sous Git, vous
          allez au-devant de maintes difficultés. Si vous pensez plutôt en
          termes de contenu, tout devient beaucoup plus simple.
        </para>
        <para>
          Si vous donnez un fichier à Git, il le scinde directement en deux
          choses&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              un contenu (suite de bits, ou <emphasis
              role="italic">blob</emphasis>),
            </para>
          </listitem>
          <listitem>
            <para>
              un arbre (lien entre le nom de fichier et le contenu).
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Il le stocke ensuite dans l'une des deux zones suivantes&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              l'index (zone temporaire),
            </para>
          </listitem>
          <listitem>
            <para>
              la base de données d'objets (zone persistante).
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Lorsque vous ajoutez un fichier (<emphasis role="italic">git add
          &lt;fichier&gt;</emphasis>)&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              l'arbre est placé dans l'index,
            </para>
          </listitem>
          <listitem>
            <para>
              le contenu est placé dans la base d'objets.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Lorsque vous <emphasis role="italic">commitez</emphasis> un fichier
          (<emphasis role="italic">git commit</emphasis>)&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              l'arbre est placé dans la base d'objets.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Git ne compare jamais deux fichiers entre eux. Il compare leur résumé,
          qui est un nombre unique calculé à partir de leur contenu.  Si le
          résumé de deux fichiers est identique, le contenu de ces fichiers est
          indentique (au bit près).
        </para>
        <para>
          L'historique de votre projet n'est pas forcément linéaire&nbsp;: vous
          pouvez lui faire suivre plusieurs routes parallèles, les branches.
        </para>
        <para>
          Vous ne pouvez créer des branches qu'à partir d'un <emphasis
          role="italic">commit</emphasis>. Il faut voir les <emphasis
          role="italic">commits</emphasis> comme des ronds-points (la route
          étant l'historique de votre projet) à partir desquels vous pouvez, si
          vous le souhaitez, prendre une autre direction dans votre projet.
        </para>
        <para>
          Si vous créez une branche, disons <emphasis
          role="italic">test</emphasis>, alors que des modifications de votre
          espace de travail ne sont pas <emphasis
          role="italic">commitées</emphasis> dans votre branche <emphasis
          role="italic">master</emphasis>, les modifications que vous
          effectuerez s'appliqueront aux fichiers non <emphasis
          role="italic">commités</emphasis> de votre espace de travail. Si vous
          faites une erreur, vous ne pourrez pas retrouver le <emphasis
          role="italic">statu quo ante</emphasis> de vos fichiers en revenant à
          la branche <emphasis role="italic">master</emphasis>.
        </para>
        <para>
          Si vous voulez enregistrer votre travail au fil de l'eau afin de
          pouvoir revenir à tout moment à un état antérieur, il vous faut donc
          <emphasis role="italic">committer</emphasis> régulièrement et
          sauvegarder votre espace de travail, répertoire <emphasis
          role="italic">.git</emphasis> y compris, par exemple <emphasis
          role="italic">via</emphasis> rsync. Lorsque vous déciderez de partager
          votre travail, vous pourrez déplacer, fusionner ou supprimer vos
          <emphasis role="italic">commits</emphasis> avant de les envoyer sous
          forme de patchs ou de les déposer sur un dépôt central.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="referentiel"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="faire-sauter-les-goulets-etranglement-avec-les-branches"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="organiser-son-historique-avec-git-rebase"/>
            </para>
          </listitem>
        </itemizedlist>
        <section id="faire-sauter-les-goulets-etranglement-avec-les-branches">
          <title>Faire sauter les goulets d'étranglement avec les
          branches</title>
          <para>
            Les branches <emphasis role="italic">Git</emphasis> permettent de
            facilement effectuer en parallèle plusieurs tâches non liées&nbsp;:
          </para>
          <para>
            Imaginons le scénario de travail suivant&nbsp;:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                On vous demande de migrer une section d'un document à un autre.
              </para>
            </listitem>
            <listitem>
              <para>
                Vous envoyez votre proposition pour validation.
              </para>
            </listitem>
            <listitem>
              <para>
                La validation se fait attendre et vous devez avancer sur
                d'autres parties des documents.
              </para>
            </listitem>
          </itemizedlist>
          <para>
            Comment faire sauter ce goulot d'étranglement&nbsp;? C'est
            (relativement) simple&nbsp;:
          </para>
          <orderedlist>
            <listitem>
              <para>
                Par défaut, vous travaillez sur la branche <emphasis
                role="italic">master</emphasis>. Votre espace de travail
                contient des modifications que vous ne souhaitez pas <emphasis
                role="italic">committer</emphasis> avant validation.
              </para>
            </listitem>
            <listitem>
              <para>
                Créez une nouvelle branche&nbsp;: <emphasis role="italic">git
                checkout -b ma-branche</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="italic">Committez</emphasis> vos modifications
                sur la nouvelle branche&nbsp;: <emphasis role="italic">git add
                mes-fichiers</emphasis>, <emphasis role="italic">git commit -m
                "mon message de commit"</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                Vous repassez sur la branche master <emphasis role="italic">git
                checkout master</emphasis> et passez à votre deuxième
                tâche.
              </para>
            </listitem>
            <listitem>
              <para>
                Si votre première tâche n'est pas validée, vous repassez sur la
                branche provisoire&nbsp;: <emphasis role="italic">git checkout
                ma-branche</emphasis> et faites un nouveau commit (que vous
                pourrez fusionner avec le ou les précédents après validation).
              </para>
            </listitem>
            <listitem>
              <para>
                Lorsque vous recevez la validation de la première tâche, vous
                mettez votre travail en cours de côté&nbsp;: <emphasis
                role="italic">git stash</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                Vous fusionnez la branche provisoire avec la branche
                master&nbsp;: <emphasis role="italic">git merge
                ma-branche</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                Vous récupérez votre travail en cours&nbsp;: <emphasis
                role="italic">git stash pop</emphasis>.
              </para>
            </listitem>
          </orderedlist>
          <para>
            Si vous n'avez pas besoin d'effectuer deux lots de tâches en
            parallèle, vous pouvez sans problème travailler dans votre espace
            local. Si vous devez revenir sur vos modifications, appellez la
            commande <emphasis role="italic">git reset --hard HEAD</emphasis>
            pour écraser vos fichiers non <emphasis
            role="italic">commités</emphasis> du répertoire local par ceux du
            dernier <emphasis role="italic">commit</emphasis>.
          </para>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="git-du-fichier-au-contenu"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
        <section id="organiser-son-historique-avec-git-rebase">
          <title>Organiser son historique avec Git rebase</title>
          <para>
            Git est d'un abord déroutant. Ses <emphasis
            role="italic">workflows</emphasis> s'appliquent à du contenu plutôt
            qu'à des fichiers. Résultat&nbsp;: le travail de groupe et la
            gestion de différentes versions concurrentes d'un même contenu
            deviennent beaucoup plus simples.
          </para>
          <para>
            Git effectue des <emphasis role="italic">commits</emphasis>
            atomiques&nbsp;: il applique des lots de modifications sur un
            contenu souvent réparti sur plusieurs fichiers, au lieu de gérer des
            <emphasis role="italic">fichiers</emphasis> proprement dits. Il nous
            invite à raisonner par lots de tâches sur un contenu et non par
            fichier.
          </para>
          <para>
            Ce fonctionnement peut sembler peu intuitif si l'on a l'habitude de
            travailler fichier par fichier et non tâche par tâche. Mais une fois
            que l'on a adapté ses habitudes de travail à ce <emphasis
            role="italic">workflow</emphasis>, on s'aperçoit &nbsp;:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                que l'on dispose d'un historique beaucoup plus facilement
                exploitable,
              </para>
            </listitem>
            <listitem>
              <para>
                qu'il est beaucoup plus facile de gérer des versions
                concurrentes d'un même contenu dans des branches de
                développement parallèles.
              </para>
            </listitem>
          </itemizedlist>
          <para>
            Imaginons que vous ayez identifié deux types de modifications
            majeurs à apporter à votre contenu&nbsp;:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                les synopsis d'un programme en ligne de commande,
              </para>
            </listitem>
            <listitem>
              <para>
                les corrections grammaticales du texte.
              </para>
            </listitem>
          </itemizedlist>
          <para>
            Si votre contenu est réparti dans un ensemble de fichiers
            modulaires, vous pourriez décider d'apporter en même temps les deux
            types de modifications dans chaque fichier un à un. Pour répartir le
            travail sur un groupe de rédacteurs techniques, il vous suffit
            d'allouer à chacun un lot de fichiers.
          </para>
          <para>
            Ce <emphasis role="italic">workflow</emphasis> n'est pas le plus
            adapté à Git. Si vous utilisez ce système de gestion de versions, il
            est préférable de diviser le travail en deux lots de tâches, que
            l'on appelera <emphasis role="italic">synopsis</emphasis> et
            <emphasis role="italic">texte</emphasis>, appliqués concurremment
            sur tous les fichiers.
          </para>
          <para>
            Les contraintes de production vous obligeront souvent à scinder ces
            deux lots de tâches en sous-lots, que vous serez obligé de faire
            alterner.
          </para>
          <para>
            Vous <emphasis role="italic">committez</emphasis> chaque sous-lot à
            chaque fois qu'il est achevé. Votre historique de <emphasis
            role="italic">commit</emphasis> ressemble alors au schéma
            suivant&nbsp;:
          </para>
          <figure>
            <title>Historique Git</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="../graphics/git-rebase-commits.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>
            Lorsque vous placerez vos <emphasis role="italic">commits</emphasis>
            sur le dépôt central, certains <emphasis
            role="italic">commits</emphasis> représenteront une étape
            intermédiaire de l'une des tâches. Votre historique et vos branches
            seront donc plus difficiles à exploiter. D'autant plus que les
            tâches inachevées alternent. Pour en récupérer une seule, il faudra
            donc choisir soigneusement les <emphasis
            role="italic">commits</emphasis> <emphasis
            role="italic">via</emphasis> la commande <emphasis role="italic">git
            cherry-pick</emphasis>.
          </para>
          <para>
            Heureusement, Git vous permet de réorganiser facilement vos
            <emphasis role="italic">commits</emphasis> avant de les
            partager. Lancez la commande <emphasis role="italic">git rebase -i
            HEAD~5</emphasis> pour réorganiser les <emphasis
            role="italic">commits</emphasis>, de la version en cours aux cinq
            précédentes, par exemple.
          </para>
          <para>
            Vous pouvez alors réécrire l'histoire pour proposer à vos
            collaborateurs un <emphasis role="italic">commit</emphasis> pour
            chaque tâche réalisée en son entier, comme sur le schéma
            suivant&nbsp;:
          </para>
          <figure>
            <title>Historique Git</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="../graphics/git-rebase-commits-2.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>
            Les <emphasis role="italic">commits</emphasis> ont tout d'abord été
            regroupés par type sur la <emphasis role="italic">flèche du
            temps</emphasis> de Git, puis fusionnés.
          </para>
          <note>
            <para>
              Si vous avez effectué simultanément les deux tâches sur un ou
              plusieurs fichiers, pas de panique&nbsp;: grâce à la commande
              <emphasis role="italic">git add -p</emphasis> vous pouvez répartir
              vos modifications imbriquées sur les <emphasis
              role="italic">commits</emphasis> idoines. Lorsque vous lancez
              <emphasis role="italic">git status</emphasis>, vous vous apercevez
              alors que vos fichiers sont à la fois prêts et non prêts à être
              <emphasis role="italic">commités</emphasis> &nbsp;: il y a deux
              états des fichiers, chaque état représentant un stade partiel de
              votre travail et la somme des deux représentant la totalité des
              modifications que vous avez apportées.
            </para>
          </note>
          <para>
            Évidemment, vous n'avez plus accès aux <emphasis
            role="italic">commits</emphasis> intermédiaires, mais c'est ce que
            vous souhaitiez&nbsp;: chaque <emphasis
            role="italic">commit</emphasis> unique représente un état cohérent
            de votre contenu.
          </para>
          <para>
            Ce <emphasis role="italic">workflow</emphasis> facilite également le
            travail d'équipe&nbsp;: vous pouvez confier ces tâches à deux
            membres différents de votre équipe, chacun travaillant dans son
            espace local. Les modifications du premier sont ensuite fusionnées
            avec celles du second dans son espace local <emphasis
            role="italic">via</emphasis> des <emphasis
            role="italic">patches</emphasis>. Enfin, les <emphasis
            role="italic">commits</emphasis> sont refactorisés avant de les
            placer sur le dépôt central.
          </para>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="git-du-fichier-au-contenu"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
      <section id="quel-referentiel-pour-le-travail-de-groupe">
        <title>Quel référentiel pour le travail de groupe&nbsp;?</title>
        <para>
          Le référentiel le plus fréquemment utilisé pour stocker des fichiers
          informatiques est le dossier, ou répertoire. Si ce dépôt est
          parfaitement adapté à la gestion de fichiers par un utilisateur unique
          sur son disque dur local, il montre rapidement ses limites pour le
          travail de groupe.
        </para>
        <para>
          Pour travailler sur un fichier, le <emphasis role="bold">rédacteur
          technique</emphasis> utilise un programme qui lit le fichier sur son
          disque dur et en charge une copie en mémoire vive. Les modifications
          s'effectuent sur cette copie. Lorsque le <emphasis
          role="bold">rédacteur technique</emphasis> enregistre ses
          modifications, le programme écrase sur le disque dur la version
          précédente du fichier. La version précédente est donc définitivement
          supprimée, sauf si le programme a créé une copie de sauvegarde ou si
          le <emphasis role="bold">rédacteur technique</emphasis> a utilisé la
          fonction <emphasis role="italic">Enregistrer sous</emphasis>, et non
          <emphasis role="italic">Enregistrer</emphasis>, pour créer une
          nouvelle version du fichier. Dans le premier cas, il n'existe que deux
          versions du fichier à un instant donné&nbsp;: la version n et la
          version n-1. Dans le second cas, le <emphasis role="bold">rédacteur
          technique</emphasis> peut créer autant de versions qu'il le souhaite,
          par exemple en ajoutant le suffixe -1, -2, etc. au nom du fichier.
        </para>
        <para>
          Les programmes ne gèrent cependant pas la modification concurrente
          d'un même fichier par plusieurs <emphasis role="bold">rédacteurs
          techniques</emphasis>. Dans le cas d'un fichier disponible sur un
          disque réseau, imaginons qu'Arsène et Louise ouvrent la même version
          de ce fichier sous un éditeur de texte. Chacun apporte des
          modifications différentes dans sa copie chargée en mémoire vive, puis
          enregistre son travail. Arsène enregistre tout d'abord ses
          modifications, puis Louise. À la prochaine ouverture du fichier,
          seules les modifications de Louise figureront dans le fichier.
        </para>
        <para>
          Pour éviter ce genre de situation, de nombreux programmes verrouillent
          les fichiers ouverts. Ils ne sont donc disponibles qu'en lecture tant
          que l'utilisateur qui les modifie en a une copie en mémoire vive
          (c'est-à-dire, tant qu'il ne l'a pas fermé). Il n'est donc pas
          possible avec ce système de travailler à plusieurs sur le même fichier
          et d'effectuer par exemple des modifications transverses par lot,
          comme modifier le chemin de toutes les images.
        </para>
        <para>
          Si le programme utilisé ne verrouille pas les fichiers ouverts, une
          coordination de tous les instants doit s'instaurer entre les membres
          de l'équipe.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="referentiel"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="repertoires-reseau-partages-peu-adaptes-au-travail-de-groupe">
        <title>Les répertoires réseau partagés - peu adaptés au travail de
        groupe</title>
        <para>
          Les fichiers partagés par une équipe de rédaction technique sont
          souvent stockés dans un répertoire partagé sur le réseau.
        </para>
        <para>
          Les <emphasis role="bold">rédacteurs techniques</emphasis> travaillent
          directement sur les fichiers partagés, ce qui pose les problèmes
          suivants&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              risque de pertes de données en cas de défaillance du réseau,
            </para>
          </listitem>
          <listitem>
            <para>
              possibilités de travail off-line (déconnecté) limitées,
            </para>
          </listitem>
          <listitem>
            <para>
              verrouillage des fichiers par les membres de l'équipe qui les ont
              ouverts.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Même fréquemment sauvegardés, les répertoires ne sont pas un
          référentiel sûr pour les données&nbsp;: la granulométrie de la
          sauvegarde est le répertoire, sa fréquence n'est souvent que
          quotidienne. En cas de perte de données, la restauration se fait
          répertoire par répertoire, et non fichier par fichier et porte sur des
          versions dont l'ancienneté dépend de l'administrateur système, et non
          du <emphasis role="bold">rédacteur technique</emphasis>. Fouiller dans
          les archives est une opération fastidieuse qui peut elle-même être
          source d'erreurs&nbsp;: en l'absence d'une comparaison fiable et aisée
          entre plusieurs versions des fichiers, le <emphasis
          role="bold">rédacteur technique</emphasis> peut facilement supprimer
          des modifications qu'il aurait souhaité conserver en voulant en
          restaurer d'autres.
        </para>
        <para>
          Copier un fichier du réseau pour le modifier sur son disque dur
          personnel, puis écraser la version du réseau par la version locale est
          une opération des plus périlleuses&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              les membres de l'équipe ne sont pas informés du fait qu'un autre
              membre modifie ou non le même fichier en même temps qu'eux&nbsp;;
              l'un des <emphasis role="bold">rédacteurs techniques</emphasis>
              devra alors renoncer à toutes ses modifications&nbsp;;
            </para>
          </listitem>
          <listitem>
            <para>
              lors d'une copie manuelle des fichiers, que ce soit <emphasis
              role="italic">via</emphasis> un gestionnaire de fichiers graphique
              ou en ligne de commande, le <emphasis role="bold">rédacteur
              technique</emphasis> peut facilement écraser la version la plus
              récente par la plus ancienne (on préférera alors avoir recours à
              un logiciel de synchronisation de fichiers tels que <ulink
              url="http://rsync.samba.org/">rsync</ulink> ou <ulink
              url="http://www.cis.upenn.edu/~bcpierce/unison/">Unison</ulink>
              (ce dernier étant plus adapté à la synchronisation
              bidirectionnelle) en ligne de commande sous GNU/Linux ou Windows,
              ou à un équivalent graphique, tel <ulink
              url="http://www.microsoft.com/en-us/download/details.aspx?id=15155">
              SyncToy</ulink>. Cependant, ce type de logiciels se base sur la
              date de dernière modification des fichiers. Lorsque l'on met à
              jour ou publie un livre FrameMaker, notamment, ceci peut créer des
              conflits entre fichiers, FrameMaker enregistrant dans ces cas tous
              les fichiers du livre, même si leur contenu n'a pas été modifié).
            </para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="referentiel"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="systemes-de-gestion-de-versions-rustiques-mais-fiables">
        <title>Les systèmes de gestion de versions - rustiques mais fiables</title>
        <para>
          Travailler sur des fichiers sources au format texte, et non binaire,
          est l'occasion pour le <emphasis role="bold">rédacteur
          technique</emphasis> de gérer son contenu comme les développeurs
          gèrent leur code&nbsp;: sous un système de gestion des sources tel que
          Git, Subversion ou SourceSafe.
        </para>
        <para>
          Ces systèmes&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              favorisent le travail de groupe,
            </para>
          </listitem>
          <listitem>
            <para>
              suppriment les copies de fichiers en doublons et
            </para>
          </listitem>
          <listitem>
            <para>
              réduisent le risque de perte de données à presque zéro.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Sur des fichiers texte, et non binaires, un système de gestion de
          version offre des fonctionnalités supérieures&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              pas de risque de pertes de données en cas de défaillance du réseau
              <footnote>
                <para>En cas d'incident réseau, l'utilisateur est averti que la
                transaction destinée à placer le fichier modifié sur le dépôt a
                échoué&nbsp;; il peut alors procéder à une nouvelle transaction,
                sa copie locale du fichier étant intacte.</para>
                </footnote>,
            </para>
          </listitem>
          <listitem>
            <para>
              possibilités de travail <emphasis
              role="italic">off-line</emphasis> (déconnecté) poussées
              <footnote>
                <para>Surtout sous Git, conçu explicitement dans ce but.</para>
                </footnote>,
            </para>
          </listitem>
          <listitem>
            <para>
              non-verrouillage des fichiers par les membres de l'équipe qui les
              ont ouverts.
            </para>
          </listitem>
          <listitem>
            <para>
              possibilité de restauration très fine et dans le temps (depuis le
              dernier dépôt du fichier sur le référentiel) et en termes de quantité de
              travail <footnote>
              <para>Les systèmes de gestion de version favorisent un dépôt
              fréquent de modifications atomiques.</para>
              </footnote>.
            </para>
          </listitem>
        </itemizedlist>
        <figure>
          <title>Le système de gestion de versions conserve l'historique des
          modifications.</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/versioning-system.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>
          Des interfaces graphiques permettent d'utiliser directement sous les
          gestionnaires de fichiers ces outils originellement conçus pour être
          utilisés en ligne de commande. Cependant, le paradigme sur lequel ils
          reposent est parfois difficile à appréhender pour les publics les moins
          technophiles <footnote>
          <para>Même si Apple a contribué à en populariser certains aspects avec
          son application <emphasis role="italic">Time
          machine</emphasis>.</para>
          </footnote>.
        </para>
        <para>
          Les systèmes de gestion des sources utilisent les concepts
          suivants&nbsp;:
        </para>
        <informaltable>
          <tgroup cols="2">
            <tbody>
              <row>
                <entry>
                  Tronc
                </entry>
                <entry>
                  Dépôt principal conservant toutes les versions des fichiers
                  placées au cours du temps par le <emphasis
                  role="bold">rédacteur technique</emphasis> (ou plus
                  fréquemment, le développeur).
                </entry>
              </row>
              <row>
                <entry>
                  Branche
                </entry>
                <entry>
                  Dépôt secondaire créé à partir de la version principale du
                  code source.
                </entry>
              </row>
              <row>
                <entry>
                  Tag
                </entry>
                <entry>
                  Instantané du tronc ou d'une branche à un instant <emphasis
                  role="italic">t</emphasis>. Permet de figer facilement une
                  version, par exemple, la version publiée, et de créer une
                  archive.
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
          Si l'on s'en donne la peine, il est également possible de mal utiliser
          les systèmes de gestion de version et de perdre des données. Mais, en
          pratique, à même niveau d'effort et de compétence, le risque de perdre
          de données est nettement moindre si le <emphasis role="bold">rédacteur
          technique</emphasis> manipule des fichiers texte sous un gestionnaire
          de version plutôt que des fichiers binaires sur un répertoire partagé.
        </para>
        <para>
          Les systèmes de gestion de code source ont une fiabilité éprouvée et
          gèrent des millions de lignes de code. Tout comme les systèmes de
          fichiers (Ext4, Btrfs, etc.) ils évoluent lentement, selon une
          politique conservatrice, et ne sont proposés en production que
          lorsqu'ils ont été exhaustivement débogués. Si les plus grands projets
          de développement informatique, tel que GNU/Linux, par exemple, leur
          font confiance, pourquoi ne pas également leur confier la
          documentation technique&nbsp;?
        </para>
        <para>
          Un bémol cependant&nbsp;: ces outils ne sont pas destinés
          spécifiquement au format XML et effectuent des comparaisons ligne par
          ligne entre les fichiers, et non pas nœud par nœud, ce qui multiplie
          inutilement les conflits entre les <emphasis
          role="italic">commits</emphasis> ou les branches.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="referentiel"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="utiliser-les-branches-des-systèmes-de-gestion-de-sources"/>
            </para>
          </listitem>
        </itemizedlist>
        <section id="utiliser-les-branches-des-systèmes-de-gestion-de-sources">
          <title>Utiliser les branches des systèmes de gestion de sources</title>
          <para>
            Les systèmes de gestion de sources proposent de créer des branches
            d'un projet&nbsp;: si à un moment donné, un projet se divise en deux
            projets incompatibles, une branche est créée à partir du projet
            principal. Le <emphasis role="bold">rédacteur technique</emphasis>
            peut ainsi gérer les différentes traductions de la documentation
            technique.
          </para>
          <para>
            Le système des branches peut servir en théorie à gérer&nbsp;:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                les différentes traductions d'une documentation technique,
              </para>
            </listitem>
            <listitem>
              <para>
                les différentes variations d'une même documentation technique.
              </para>
            </listitem>
          </itemizedlist>
          <para>
            En pratique, cependant, il vaut mieux gérer les déclinaisons d'une
            même documentation à l'aide des mécanismes de partage de sections et
            de filtrage de texte conditionnel des outils de documentation.
          </para>
          <para>
            D'autre part, le système de gestion des branches est plus ou moins
            adapté à la gestion des traductions selon le gestionnaire de sources
            que l'on utilise.
          </para>
          <para>
            La principale différence entre les systèmes de gestion de sources
            Git et Subversion, c'est leur manière de gérer les branches. Créer
            une branche sous Subversion revient à dupliquer un répertoire. Les
            fichiers des deux répertoires évoluent ensuite séparément. Sous Git,
            en revanche, la création de branche se fait sans duplication de
            données. Sur un même répertoire local, une commande permet de
            changer de branche.
          </para>
          <para>
            Créer une traduction d'une documentation consiste à <emphasis
            role="italic">forker</emphasis>, soit créer une branche, le document
            initial. Si l'on utilise Git se pose alors le choix entre&nbsp;:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                copier le répertoire de la langue source,
              </para>
            </listitem>
            <listitem>
              <para>
                créer une branche sur le répertoire de la langue source.
              </para>
            </listitem>
          </itemizedlist>
          <para>
            La solution de la branche permet en théorie d'effectuer du <emphasis
            role="italic">Cherry picking</emphasis> et d'appliquer facilement à
            toutes les langues cibles des modifications affectant uniquement le
            code XML du projet.
          </para>
          <para>
            Par exemple, une modification de
          </para>
          <programlisting>
            &lt;image href="../images/filter.png" placement="break"/&gt;
          </programlisting>
          <para>
            en
          </para>
          <programlisting>
            &lt;image href="../images/filter.png" placement="break" scalefit="yes"/&gt;
          </programlisting>
          <para>
            de la version anglaise de la documentation peut facilement être
            appliquée aux versions chinoise, française, allemande ou autre si
            elle a fait l'objet d'un <emphasis role="italic">commit</emphasis>
            distinct. En pratique, cependant, cette opération peut s'avérer
            délicate et n'être réellement utile que si l'on doit gérer un grand
            nombre de différentes versions linguistiques. En tout cas, la
            solution des branches autorise de telles opérations, non celle des
            répertoires.  Elle est cependant plus difficile à appréhender et à
            utiliser par l'équipe de rédaction technique.
          </para>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="systemes-de-gestion-de-versions-rustiques-mais-fiables"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
      <section id="les-cms-le-workflow-en-prime-mais-une-fiabilite-a-tester">
        <title>Les CMS&nbsp;: le workflow en prime, mais une fiabilité à
        tester</title>
        <para>
          Les CMS (Content Management Systems), ainsi dénommés pour des raisons
          purement marketing, mais dont la fonction se comprend mieux avec
          l'acronyme GED (système de gestion électronique de documents),
          apportent des notions de <emphasis role="italic">workflow</emphasis>
          et de gestion des liens qui s'avèrent précieuses lorsque l'on gère des
          documents modulaires.
        </para>
        <para>
          S'ils utilisent des formats monolithiques tels que FrameMaker, les
          <emphasis role="bold">rédacteurs techniques</emphasis> peuvent
          utiliser des CMS tels que SharePoint, Alfresco ou consorts pour&nbsp;:
        </para>
        <orderedlist>
          <listitem>
            <para>
              <phrase>
                télécharger sur leur disque dur une copie locale des fichiers
                partagés,
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                effectuer leurs modifications sur la copie locale,
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                déposer la copie modifiée sur le dépôt central.
              </phrase>
            </para>
          </listitem>
        </orderedlist>
        <para>
          Cette solution est plus satisfaisante que le partage sur un simple
          serveur de fichiers, ne serait-ce que parce que la fréquence à
          laquelle les fichiers transitent sur le réseau est bien moindre
          <footnote>
            <para>
              À chaque dépôt du fichier sur le CMS, et non à chaque
              enregistrement de son travail par le <emphasis
              role="bold">rédacteur technique</emphasis>.
            </para>
            </footnote>. Il est cependant toujours nécessaire de verrouiller les
            fichiers en cours de modification, ce dont se charge le CMS.
        </para>
        <para>
          Originellement destinés aux documents monolithiques, de nombreux CMS
          prennent aujourd'hui en compte la modularisation des documentations
          techniques. Des solutions telles que DocZone ou Componize, cette
          dernière bâtie sur Alfresco, sont par exemple explicitement destinées
          à gérer des documentations modulaires basées sur l'architecture XML
          DITA.
        </para>
        <para>
          Mais comment croire que ces solutions, qui sont fréquemment
          disponibles sous de nouvelles versions, marketing oblige, sont toutes
          d'une fiabilité optimale&nbsp;?
        </para>
        <para>
          J'aurais quelques scrupules, et quelques inquiétudes, sur le fait de
          leur confier entièrement la gestion et l'archivage des fichiers
          sources de la documentation. Une sélection rigoureuse de la solution
          s'impose, associée à une procédure de sauvegarde et de restauration
          éprouvée.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="referentiel"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="base-de-donnees-sql">
        <title>Base de données SQL</title>
        <para>
          Dans le cas d'un CMS de type Drupal, Joomla ou WordPress, le
          référentiel est une base de données SQL. Il conserve un historique,
          mais uniquement article par article et ne permet pas la recherche et
          le remplacement de texte à travers tout le contenu. Cela peut
          justifier le choix de gérer le contenu sous-jacent du CMS sous forme
          de fichiers texte.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="referentiel"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="un-referentiel-unique">
        <title>Un référentiel unique&nbsp;?</title>
        <para>
          Idéalement, tout le contenu peut être placé sous un référentiel
          unique, par exemple le logiciel de gestion de versions <ulink
          url="http://fr.wikipedia.org/wiki/Git">Git</ulink>. Ceci en maximise
          la réutilisation, la cohérence et la qualité. Si le contenu est au
          format DITA XML ou DocBook, par exemple, on peut exploiter au mieux
          les capacités de <emphasis role="italic">single-sourcing</emphasis> de
          ces formats pour le publier sous la forme appropriée.
        </para>
        <para>
          Le contenu devient un réseau de modules d'information&nbsp;; il faut
          alors gérer les relations au sein de ce réseau, notamment lors des
          mises à jour.
        </para>
        <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/referentiel-unique.png"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
        <para>
          En pratique, il semble que rares sont les entreprises qui ont franchi
          ce pas. Il est vrai que tant que les formats structurés ne seront pas
          enseignés dans le secondaire, il paraît utopique de vouloir y
          convertir tous les acteurs de la société, surtout si le turn-over y
          est important.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="referentiel"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section id="validation-et-controle-qualite">
      <title>Validation et contrôle qualité</title>
      <para>
        Un support de rédaction technique doit être soumis à un contrôle qualité
        rigoureux avant d'être communiqué à ses différentes cibles.
      </para>
      <para>
        Le contenu doit être validé avant livraison. Cela paraît évident, mais
        cela demande de bien impliquer en amont les personnes chargées de la
        validation. Idéalement, la phase de validation se déroule en parallèle
        de la phase de création&nbsp;: plus les modifications interviennent tôt,
        moins elles sont coûteuses. Un outil de gestion de contenu d'entreprise
        tel qu'<ulink url="http://www.alfresco.com/fr/">Alfresco</ulink> peut
        sembler intéressant afin de mettre en place des <emphasis
        role="italic">workflows</emphasis>, sur le papier du moins. Dans les
        faits, une telle solution peut s'avérer lourde. Elle est de plus peu
        compatible avec certains formats sources basés sur des documents
        modulaires et non monolithiques et avec les logiciels de gestion de
        versions (le projet <ulink
        url="http://www.componize.com">Componize</ulink> se propose cependant de
        gérer des projets DITA sous Alfresco). Il reste cependant impératif de
        mettre en place des étapes de validation tout au long du
        projet. Associés à un système de gestion de versions, les outils de
        comparaison sont très utiles pour valider les mises à jour. Une version
        « taguée » d'un projet DITA XML et la version en cours peuvent par
        exemple être exportées au format RTF, puis comparées sous un traitement
        de texte. Cela est bien moins fastidieux qu'une relecture
        comparée. Comparer les modules d'information directement sous le système
        de gestion de versions n'est pas suffisant, car ils ne sont que les «
        briques » du document final.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="redaction-technique-un-processus-industriel"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="workflow-de-creation-et-validation"/>
          </para>
        </listitem>
      </itemizedlist>
      <section id="workflow-de-creation-et-validation">
        <title>Workflow de création et validation</title>
        <para>
          Un processus de création et de mise à jour de la documentation
          technique qui repose sur la mémoire des acteurs humains est peu
          fiable. Un <emphasis role="bold">rédacteur technique</emphasis> peut
          être fatigué, souffrant, en congés, oublier des données lorsqu'il est
          saturé d'informations ou avoir quitté la société.  L'information entre
          deux personnes peut également mal circuler ou être mal comprise. C'est
          pour pallier ces faiblesses que l'homme a créé des outils. En
          revanche, il est créatif, à l'inverse des machines.
        </para>
        <para>
          Face à cet état de fait, il convient de mettre un système de gestion
          de l'information relative à l'évolution de la documentation qui soit
          tolérant à l'erreur humaine. Il faut donc soit&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              mettre en œuvre des <emphasis role="italic">workflows</emphasis>
              sous un CMS,
            </para>
          </listitem>
          <listitem>
            <para>
              utiliser le système de gestion de tickets utilisés pour la gestion
              des nouvelles fonctionnalités du produit documenté (par exemple,
              Trac)&nbsp;:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  création d'un ticket par un développeur,
                </para>
              </listitem>
              <listitem>
                <para>
                  mise en œuvre du ticket par un rédacteur technique,
                </para>
              </listitem>
              <listitem>
                <para>
                  fermeture du ticket par le créateur du ticket,
                </para>
              </listitem>
              <listitem>
                <para>
                  publication de la documentation lorsque tous les tickets
                  critiques sont fermés.
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>
          Les fonctions principales d'un CMS sont les suivantes&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              gestion des métadonnées,
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="italic">workflows</emphasis>,
            </para>
          </listitem>
          <listitem>
            <para>
              traçabilité,
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Quel qu'il soit, le système de suivi doit offrir une visibilité et une
          traçabilité totales des modifications apportées à la documentation
          technique (quoi, qui, quand).
        </para>
        <para>
          Ce système doit être unique et exhaustif&nbsp;: il doit centraliser
          toutes les demandes de modification de la documentation technique.
        </para>
        <para>
          Si le document est disponible en plusieurs langues, chaque ticket doit
          être dupliqué pour chaque langue ou, dans le cas d'un CMS, à chaque
          langue doit correspondre un <emphasis
          role="italic">workflow</emphasis> distinct.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="validation-et-controle-qualite"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section id="traduction">
      <title>Traduction</title>
      <para>
        Les contraintes de traduction doivent être prises en compte en amont du
        processus rédactionnel. Elles ont des implications autant sur le style
        rédactionnel que sur l'organisation du référentiel.
      </para>
      <para>
        Il n'y a pas de recette miracle&nbsp;: la livraison d'informations dans
        plusieurs langues demande un suivi constant. Mais la prise en compte des
        contraintes en amont et l'utilisation d'une méthodologie appropriée
        permettent d'améliorer la qualité et de diminuer les coûts et les délais
        de livraison des versions multilingues. La traduction doit être intégrée
        au <emphasis role="italic">workflow</emphasis> documentaire. Il faut
        également faire communiquer avec les traducteurs les différents
        acteurs&nbsp;: <emphasis role="bold">rédacteurs techniques</emphasis>,
        mais également ingénieurs, experts et concepteurs.
      </para>
      <para>
        Si la documentation repose sur un ensemble de modules, la traduction
        peut se faire en parallèle de la rédaction, ce qui réduit les délais de
        livraison.
      </para>
      <figure>
        <title>Parallèlisation de la rédaction et de la traduction</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../graphics/parallelisation-traduction.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>
        En ce qui concerne le référentiel des fichiers sources, vaut-il mieux
        placer les répertoires de langue en amont ou en aval des répertoires de
        projets documentaires&nbsp;? Autrement dit, vaut-il mieux adopter la
        structure suivante&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            english
          </para>
          <itemizedlist>
            <listitem>
              <para>
                produit 1
              </para>
            </listitem>
            <listitem>
              <para>
                produit 2
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
            francais
          </para>
          <itemizedlist>
            <listitem>
              <para>
                produit 1
              </para>
            </listitem>
            <listitem>
              <para>
                produit 2
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      <para>
        ou la suivante&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            produit 1
          </para>
          <itemizedlist>
            <listitem>
              <para>
                english
              </para>
            </listitem>
            <listitem>
              <para>
                francais
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
            produit 2
          </para>
          <itemizedlist>
            <listitem>
              <para>
                english
              </para>
            </listitem>
            <listitem>
              <para>
                francais
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      <para>
        Dans la plupart des cas, il est préférable de placer la distinction
        entre les langues le plus en amont possible. Pour reprendre une
        terminologie utilisée dans le développement logiciel, créer une
        traduction d'un ensemble d'informations équivaut à créer une <emphasis
        role="italic">branche</emphasis> de cet ensemble. Comme il est plus
        facile de manipuler une branche par sa racine que par ses ramifications,
        à l'usage, il est beaucoup plus facile de manipuler des répertoires
        complets, ne serait-ce que pour les fournir aux traducteurs, qu'un
        ensemble de sous-répertoires.
      </para>
      <para>
        Une fois la traduction réalisée, les modifications apportées à la
        version source ou à la version traduite ne peuvent être appliquées
        automatiquement à l'autre version. Pour continuer dans la terminologie
        du monde logiciel, la nouvelle branche est un <emphasis
        role="italic">fork</emphasis>&nbsp;: il devient impossible d'appliquer
        automatiquement à l'une les modifications apportées à l'autre. Pour
        fournir les mêmes informations dans les différentes langues, il est donc
        crucial de suivre efficacement les mises à jour de la version d'origine.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="redaction-technique-un-processus-industriel"/>
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="format-cible">
      <title>Format cible</title>
      <para>
        Le format cible <footnote>
        <para>Dans le cas d'une photo, le format cible est le format <ulink
        url="http://fr.wikipedia.org/wiki/Jpeg">JPEG</ulink>, qui est utilisé
        pour l'affichage Web ou l'impression et sur lequel les modifications ne
        peuvent être annulées une fois fermé le logiciel de retouches.</para>
        </footnote> d'un support de rédaction technique est celui sous lequel
        l'audience du message y accédera. Il est différent de celui sous lequel
        le <emphasis role="bold">rédacteur technique</emphasis> crée le
        contenu. Le <emphasis role="italic">single-sourcing</emphasis> permet de
        générer plusieurs livrables à des formats différents à partir d'un même
        format source.
      </para>
      <para>
        À partir des fichiers sources validés, les livrables sont générés selon
        l'une des méthodes suivantes&nbsp;:
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Méthode
              </entry>
              <entry>
                Exemple
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                Totalement automatique
              </entry>
              <entry>
                Livre blanc du format structuré <ulink
                url="http://dita.xml.org/">DITA</ulink> au format cible PDF
                <emphasis role="italic">via</emphasis> DITA Open Toolkit.
              </entry>
            </row>
            <row>
              <entry>
                Semi-automatique
              </entry>
              <entry>
                Contenu au format DITA exporté en HTML puis collé sous un CMS <footnote>
                <para>Ceci est automatisable par un script&nbsp;; le CMS Drupal
                propose également un module <ulink
                url="http://drupal.org/project/dita">DITA integration for
                Drupal</ulink>.</para>
                </footnote>.
              </entry>
            </row>
            <row>
              <entry>
                Manuelle
              </entry>
              <entry>
                Plaquette marketing au format traitement de texte ou DITA mise
                en page sous Indesign, exportée en PDF, puis imprimée&nbsp;;
                selon la fréquence de publication du document final, des filtres
                d'import XML peuvent également être mis en place.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Plus le processus est automatisé, plus le risque d'erreur est faible et
        plus la publication et la mise à jour sont aisées.  L'automatisation
        facilite également le <emphasis
        role="italic">single-sourcing</emphasis>, qui consiste à générer
        plusieurs livrables à des formats cibles différents à partir d'un même
        format source. Un projet au format DITA XML peut ainsi être livré sous
        forme de fichier PDF, d'aide compilée Windows, d'aide JavaHelp, de site
        en HTML, etc. Le XML offre en ce domaine des possibilités quasi
        illimitées.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="redaction-technique-un-processus-industriel"/>
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="livraison">
      <title>Livraison</title>
      <para>
        Le <emphasis role="bold">rédacteur technique</emphasis> livre le
        document à son destinataire de la manière appropriée&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            animation publiée sur un site de streaming,
          </para>
        </listitem>
        <listitem>
          <para>
            plaquette distribuée dans les salons ou laissée en clientèle par les
            ingénieurs commerciaux,
          </para>
        </listitem>
        <listitem>
          <para>
            journaux envoyés aux clients,
          </para>
        </listitem>
        <listitem>
          <para>
            site Internet mis à jour,
          </para>
        </listitem>
        <listitem>
          <para>
            document mis en ligne en PDF ou distribué sous forme de guide
            imprimé…
          </para>
        </listitem>
      </itemizedlist>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="redaction-technique-un-processus-industriel"/>
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section id="format-structure-dita-xml">
    <title>Format structuré DITA XML</title>
    <para>
      Diminuer les coûts de production et de traduction, réduire les délais de
      mise sur le marché (ou <emphasis role="italic">time to market</emphasis>)
      et améliorer la qualité de la documentation.  Voilà les défis que doit
      relever aujourd'hui le <emphasis role="bold">rédacteur
      technique</emphasis>. L'un des meilleurs moyens d'y parvenir consiste à
      réduire le volume source de la documentation et à mieux gérer le contenu
      d'entreprise.
    </para>
    <figure>
      <title>Formats de documentation technique&nbsp;: degrés de
      structuration</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../graphics/degre-structuration.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>
      L'information que le <emphasis role="bold">rédacteur technique</emphasis>
      fournit au public <emphasis role="italic">doit</emphasis> être
      redondante&nbsp;: l'entreprise doit présenter à chacun de ses publics
      toute l'information dont il a besoin, sur le support qui lui est
      adapté. Pour prendre l'exemple le plus simple, chaque support
      d'information doit mentionner les coordonnées de la société. Mais jusqu'à
      50 % de l'information disséminée par l'entreprise est répétée.
    </para>
    <para>
      En revanche, la redondance de l'information en interne engendre des coûts
      supplémentaires, allonge les cycles de production et entraîne une baisse
      de l'homogénéité, et donc de la qualité, du contenu. Il est donc
      primordial de diminuer et de mieux partager le contenu source et d'en
      diminuer le volume. Le <emphasis role="bold">rédacteur
      technique</emphasis> doit diviser l'information en briques autonomes
      uniques, standardisées et génériques, pour pouvoir l'assembler à la
      demande. Il doit donc utiliser des modules structurés de manière homogène
      qui peuvent être facilement manipulés par des applications.
    </para>
    <figure>
      <title>Les sources de la documentation doivent être moins volumineuses que
      les livrables.</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../graphics/non-redondance.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>
      DITA (Darwin Information Typing Architecture) est une architecture XML de
      rédaction structurée destinée à la création de documents modulaires et à
      la réutilisation du contenu. À partir d'une base commune de modules
      d'information atomiques DITA XML, le <emphasis role="bold">rédacteur
      technique</emphasis> peut fournir en temps réel toute l'information dont
      chaque utilisateur a besoin, sur tout type de média, du support
      d'e-learning au document PDF ou papier, en passant par le site Web.
    </para>
    <para>
      DITA XML applique le principe de non-redondance des informations propre
      aux bases de données normalisées. Cette architecture transpose à la
      documentation technique la révolution introduite dans l'industrie par la
      standardisation&nbsp;: si l'on peut construire des automobiles de modèles
      différents à partir d'un ensemble de pièces identiques, de même, le
      <emphasis role="bold">rédacteur technique</emphasis> peut publier des
      documents différents à partir d'un ensemble de briques d'information
      standardisées.
    </para>
    <itemizedlist>
      <title>Related links</title>
      <listitem>
        <para>
          <xref linkend="cas-concrets-utilisation-de-dita-xml"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="formats-structures-et-non-structures"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="une-architecture-documentaire-trop-complexe"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="du-document-a-la-base-documentaire-modulaire"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="cas-concret-documentation-de-nufirewall"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <xref linkend="didacticiels-dita-xml-et-xsl-fo"/>
        </para>
      </listitem>
    </itemizedlist>
    <section id="cas-concrets-utilisation-de-dita-xml">
      <title>Cas concrets d'utilisation de DITA XML</title>
      <para>
        L'utilisation quotidienne du format de rédaction structurée DITA XML sur
        des projets multilingues en tant que <emphasis role="bold">rédacteur
        technique</emphasis> m'a amené à développer certaines solutions et
        astuces que je vous livre ici. Tout retour d'expérience est le
        bienvenu&nbsp;!
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="format-structure-dita-xml"/>
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="formats-structures-et-non-structures">
      <title>Formats structurés et non structurés</title>
      <para>
        Les formats structurés favorisent la création de documents minimalistes,
        complets et cohérents. Ils permettent au <emphasis role="bold">rédacteur
        technique</emphasis> de se concentrer sur le contenu et d'améliorer
        l'expérience utilisateur et l'utilisabilité de la documentation
        technique.
      </para>
      <para>
        Les informations contenues dans un document technique peuvent être
        catégorisées selon leur sens. Par défaut, <ulink
        url="http://fr.wikipedia.org/wiki/Darwin_Information_Typing_Architecture">
        DITA XML</ulink> propose trois types de base&nbsp;:
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Type sémantique
              </entry>
              <entry>
                Description
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <emphasis role="italic">concept</emphasis>
              </entry>
              <entry>
                Introduction ou présentation d'un concept.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis role="italic">task</emphasis>
              </entry>
              <entry>
                Procédure pas à pas, séquentielle et numérotée, destinée à
                réaliser une tâche.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis role="italic">reference</emphasis>
              </entry>
              <entry>
                Informations de référence sur une liste d'éléments tels que des
                options d'un programme.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <figure>
        <title>Formats structurés et non structurés</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../graphics/structured.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>
        Sous un format non structuré tel que le format traditionnel de <ulink
        url="http://en.wikipedia.org/wiki/Adobe_FrameMaker" >FrameMaker</ulink>,
        rien ne contraint le <emphasis role="bold">rédacteur
        technique</emphasis> à organiser l'information selon son sens. Si des
        règles de rédaction rigoureuses ne sont pas scrupuleusement suivies,
        l'information fournie à l'utilisateur risque d'être peu claire et
        difficile à parcourir rapidement.
      </para>
      <para>
        Avec des formats structurés tels que DITA XML, en revanche&nbsp;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            le <emphasis role="bold">rédacteur technique</emphasis> se concentre
            sur le contenu,
          </para>
        </listitem>
        <listitem>
          <para>
            l'information est présentée à l'utilisateur selon une organisation
            cohérente et prévisible,
          </para>
        </listitem>
        <listitem>
          <para>
            l'accès à l'information est séquentiel et rapide,
          </para>
        </listitem>
        <listitem>
          <para>
            l'information peut facilement être réorganisée selon les besoins,
          </para>
        </listitem>
        <listitem>
          <para>
            l'utilisabilité du support d'information fourni est optimale.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Les types d'information de haut niveau tels que <emphasis
        role="italic">task</emphasis> sont divisés en types de plus bas niveau,
        par exemple&nbsp;:
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Type
              </entry>
              <entry>
                Description
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <emphasis role="italic">prereq</emphasis>
              </entry>
              <entry>
                Liste de points obligatoires préalables à la réalisation d'une
                tâche.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis role="italic">steps</emphasis>
              </entry>
              <entry>
                Série d'étapes de la procédure.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis role="italic">stepxmp</emphasis>
              </entry>
              <entry>
                Exemple de réalisation d'une étape.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Les règles syntaxiques interdisent au <emphasis role="bold">rédacteur
        technique</emphasis> de faire figurer une procédure pas à pas dans une
        section d'un autre type que <emphasis role="italic">task</emphasis>. Le
        <emphasis role="bold">rédacteur technique</emphasis> dispose donc d'un
        véritable modèle de rédaction qui l'aide à présenter des
        informations&nbsp;:
      </para>
      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>
                <emphasis role="italic">minimalistes</emphasis>
              </entry>
              <entry>
                selon le principe de design <emphasis role="italic">less is
                more</emphasis>, l'utilisateur ne dispose <emphasis
                role="italic">que</emphasis> de l'information dont il a
                besoin&nbsp;: une section <emphasis
                role="italic">task</emphasis>, par exemple, ne contient que des
                prérequis, une procédure et quelques autres éléments
                spécifiques&nbsp;; toutes les informations conceptuelles ou de
                référence sont placées dans des sections à part&nbsp;;
              </entry>
            </row>
            <row>
              <entry>
                <emphasis role="italic">complètes</emphasis>
              </entry>
              <entry>
                l'utilisateur dispose de <emphasis
                role="italic">toute</emphasis> l'information dont il a
                besoin&nbsp;; une section de type <emphasis
                role="italic">task</emphasis> sans procédure n'est pas une
                section DITA XML valide et ne pourra pas être publiée&nbsp;; il
                est même possible de mettre en œuvre un mécanisme vérifiant
                automatiquement avant publication la présence de blocs
                d'information facultatifs selon le schéma <ulink
                url="http://fr.wikipedia.org/wiki/XML_Schema" >XSD</ulink> DITA,
                mais que le <emphasis role="bold">rédacteur technique</emphasis>
                juge obligatoires, tels que le résultat d'une procédure&nbsp;;
              </entry>
            </row>
            <row>
              <entry>
                <emphasis role="italic">cohérentes</emphasis>
              </entry>
              <entry>
                les informations de même type sont présentées dans le même ordre
                et avec la même mise en page&nbsp;; les blocs d'information
                identiques répétés à différents endroits, tels qu'une remarque,
                sont issus d'une seule et même source et sont donc strictement
                identiques.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="format-structure-dita-xml"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="docbook-ou-dita-xml"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="migration-de-framemaker-vers-dita-xml"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="migrer-de-framemaker-vers-dita-xml"/>
          </para>
        </listitem>
      </itemizedlist>
      <section id="docbook-ou-dita-xml">
        <title>DocBook ou DITA XML&nbsp;?</title>
        <para>
          Certaines entreprises ont parfois un contenu existant au format <ulink
          url="http://www.oasis-open.org/docbook/">DocBook</ulink>.  Géré
          souvent par les acteurs les plus techniques de la société, il coexiste
          la plupart du temps avec d'autres contenus au format FrameMaker ou
          traitement de texte. S'il est décidé de fédérer tout le contenu
          d'entreprise sous un seul format, il semble naturel de capitaliser les
          efforts fournis sur la chaîne de création et de publication <emphasis
          role="italic">DocBook</emphasis> et de sélectionner ce format. C'est
          pourtant se priver des gains de productivité spectaculaires offerts
          par <ulink
          url="http://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture">
          DITA XML</ulink>.
        </para>
        <para>
          Il est facile de générer du <emphasis role="italic">DocBook</emphasis>
          à partir de DITA XML.  DITA Open Toolkit propose par défaut ce format
          cible, au même titre que le PDF ou le HTML. L'opération inverse ne
          peut pas être totalement automatisée. Pourquoi&nbsp;?
        </para>
        <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/entropie.png"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
        <para>
          Il n'est pas possible de migrer automatiquement des données de formats
          pauvres vers des format riches en information.
        </para>
        <para>
          Tout simplement parce que le contenu au format DITA XML contient plus
          d'informations. Passer d'un format plus riche à un format plus pauvre
          en information est une opération entropique qui peut facilement être
          automatisée. Par exemple, générer un PDF à partir de DITA
          XML. Effectuer l'opération inverse exige d'injecter de l'intelligence,
          opération que seul l'être humain peut aujourd'hui effectuer.
        </para>
        <para>
          Si votre contenu était une photo, nous pourrions faire l'analogie
          suivante&nbsp;:
        </para>
        <informaltable>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  Format de contenu
                </entry>
                <entry>
                  Format de photo
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  DITA XML
                </entry>
                <entry>
                  <ulink url="http://fr.wikipedia.org/wiki/RAW_(format_d%27image)">
                  RAW</ulink>
                  <footnote>
                    <para>Ce n'est bien sûr qu'une analogie, DITA XML étant un
                    standard, à la différence du format RAW.
                    </para>
                  </footnote>
                </entry>
              </row>
              <row>
                <entry>
                  DocBook
                </entry>
                <entry>
                  <ulink url="http://fr.wikipedia.org/wiki/Tagged_Image_File_Format">
                  TIFF</ulink>
                </entry>
              </row>
              <row>
                <entry>
                  PDF
                </entry>
                <entry>
                  <ulink url="http://fr.wikipedia.org/wiki/Jpeg">JPEG</ulink>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
          Le passage de RAW en TIFF et de TIFF en JPEG est destructif et ne peut
          se faire en sens inverse <footnote> <para>Pour être aussi exact que
          possible, vous pouvez enregistrer une image JPEG au format TIFF&nbsp;;
          mais cette image aura une qualité égale à celle de l'image JPEG,
          inférieure à la qualité habituelle des images TIFF. En revanche, on ne
          peut à ma connaissance pas enregistrer une image TIFF sous un format
          RAW.</para>
          </footnote>.
        </para>
        <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/entropie-dita-docbook.png"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
        <para>
          Le PDF est sémantiquement plus pauvre que DocBook, lui-même plus pauvre
          que DITA XML <footnote>
          <para>Le PDF est cependant plus riche en informations de mise en page,
          appliquées automatiquement à partir d'une feuille de style.</para>
          </footnote>.
        </para>
        <para>
          Si votre entreprise tient absolument à utiliser du <emphasis
          role="italic">DocBook</emphasis>, il est toujours loisible de générer
          le contenu <emphasis role="italic">DocBook</emphasis> à partir d'un
          contenu source au format DITA XML. À condition que le contenu source
          reste au format DITA XML (c'est à dire, à condition qu'aucune
          modification apportée au contenu <emphasis
          role="italic">DocBook</emphasis> ne soit sauvegardée) et que le format
          <emphasis role="italic">DocBook</emphasis> ne soit qu'une étape de la
          génération des livrables, au même titre que le format FO, vous
          bénéficiez ainsi des fonctionnalités avancées de réutilisation du
          contenu que propose DITA XML.
        </para>
        <para>
          L'effort de migration d'un format non structuré est certes un peu plus
          important vers DITA XML que vers <emphasis
          role="italic">DocBook</emphasis>, puisque vous devez injecter plus
          d'informations sémantiques. Vous devez également migrer le contenu
          <emphasis role="italic">DocBook</emphasis> vers DITA XML, ce qui
          représente également un effort, quoique plus faible. Mais votre
          contenu est immédiatement de meilleure qualité, car plus structuré. Et
          vous pourrez rapidement cueillir tous les fruits de votre labeur,
          notamment si une traduction de votre contenu dans une nouvelle langue
          est envisagée.
        </para>
        <para>
          De manière générale, un professionnel a toujours intérêt à travailler
          sur le format le plus riche, ne serait-ce que pour être pro-actif et
          anticiper sur les nouveaux besoins.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="formats-structures-et-non-structures"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="migration-de-framemaker-vers-dita-xml">
        <title>Migration de FrameMaker vers DITA XML</title>
        <para>
          Migrer de FrameMaker vers <ulink url="http://dita.xml.org/">DITA
          XML</ulink>, ce n'est pas comme enregistrer un document Word au format
          LibreOffice <footnote> <para>LibreOffice propose une fonction
          d'enregistrement au format DocBook, mais très imparfaite&nbsp;; le XML
          qu'elle produit peut servir de base à la création d'une version
          DocBook, avec beaucoup d'efforts… Sauf à maintenir deux versions du
          même contenu, le processus de migration de LibreOffice vers DocBook
          exige donc un arrêt temporaire des livraisons des nouvelles versions
          de la documentation&nbsp;; il doit donc être soigneusement
          planifié</para> </footnote>. Aucun processus automatique ne permet de
          migrer un document non structuré vers un format structuré. Dans le
          pire des cas, selon la qualité de votre document de départ, cela peut
          s'apparenter à transformer une friche en jardin à la française. Mais
          une migration bien planifiée permet de passer au nouveau format sans
          perturber le rythme des livraisons.
        </para>
        <para>
          Pour filer la métaphore, si l'on se fixe pour but de convertir un
          marécage en parterre du château de Versailles, il convient de passer
          par l'étape du jardin à l'anglaise - soit un endroit certes non
          rigoureusement architecturé, mais très agréable à vivre. Bonne
          nouvelle&nbsp;: si le <emphasis role="bold">rédacteur
          technique</emphasis> a utilisé de manière cohérente un jeu de styles
          limité et organisé rationnellement son contenu FrameMaker, il est déjà
          certainement très proche de ce stade.
        </para>
        <figure>
          <title>Migration de FrameMaker vers DITA XML</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/framemaker-to-dita-migration.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>
          D'ailleurs, si, pour une raison quelconque, votre projet de migration
          devait s'arrêter là, les <emphasis role="bold">rédacteurs
          techniques</emphasis>, l'entreprise et les utilisateurs y auraient
          déjà beaucoup gagné, respectivement en&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              facilité de mise à jour,
            </para>
          </listitem>
          <listitem>
            <para>
              cohérence et rapidité de publication des nouvelles versions,
            </para>
          </listitem>
          <listitem>
            <para>
              facilité d'accès à l'information.
            </para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="formats-structures-et-non-structures"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="restructuration-du-contenu-framemaker"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="table-de-conversion-framemaker-vers-dita-xml"/>
            </para>
          </listitem>
        </itemizedlist>
        <section id="restructuration-du-contenu-framemaker">
          <title>Restructuration du contenu FrameMaker</title>
          <para>
            La partie automatisée d'une migration de <ulink
            url="http://en.wikipedia.org/wiki/Adobe_FrameMaker">FrameMaker</ulink>
            vers <ulink
            url="http://fr.wikipedia.org/wiki/Darwin_Information_Typing_Architecture">
            DITA XML</ulink> consiste à appliquer une table de conversion entre
            les styles <emphasis role="italic">FrameMaker</emphasis> et les
            structures <emphasis role="italic">DITA XML</emphasis>.
          </para>
          <para>
            Un important travail de restructuration du document FrameMaker doit
            cependant être effectué en amont&nbsp;:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                restructuration de l'information selon les trois catégories
                <emphasis role="italic">concept</emphasis>, <emphasis
                role="italic">tâche</emphasis> et <emphasis
                role="italic">référence</emphasis>,
              </para>
            </listitem>
            <listitem>
              <para>
                suppression des <emphasis role="italic">overrides</emphasis>
                (propriétés de texte appliquées manuellement et écrasant les
                styles&nbsp;; ce genre d'hérésie est, sinon impossible, du moins
                très limité sous un format structuré),
              </para>
            </listitem>
            <listitem>
              <para>
                harmonisation et simplification des styles FrameMaker pour les
                limiter et les faire correspondre aux balises DITA XML qui
                seront utilisées (par exemple, un style <emphasis
                role="italic">note_important</emphasis> vers la balise &lt;note
                type="important&gt;&nbsp;; il faut donc au préalable analyser le
                contenu existant et décider quel ensemble de balises sera
                utilisé parmi les centaines de balises proposées par DITA
                XML&nbsp;: il est en effet fortement déconseillé de les utiliser
                toutes).
              </para>
            </listitem>
          </itemizedlist>
          <figure>
            <title>Restructuration du contenu FrameMaker et mise en place de la
            chaîne DITA XML</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="../graphics/framemaker-restructure.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>
            Ce travail d'harmonisation peut se faire en parallèle avec la mise à
            jour et la publication du document FrameMaker. La qualité de ce
            document n'en sera que meilleure. En même temps que cette
            réorganisation du contenu, vous pouvez mettre en place la chaîne
            complète de création, gestion et publication DITA XML sur un
            échantillon de votre contenu&nbsp;:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                mise en place des outils,
              </para>
            </listitem>
            <listitem>
              <para>
                réalisation des feuilles de style des différents formats de
                sortie,
              </para>
            </listitem>
            <listitem>
              <para>
                formation des <emphasis role="bold">rédacteurs
                techniques</emphasis>, graphistes et traducteurs,
              </para>
            </listitem>
            <listitem>
              <para>
                formation et sensibilisation des autres acteurs de l'entreprise.
              </para>
            </listitem>
          </itemizedlist>
          <para>
            Ce n'est qu'une fois que sa chaîne est fiable et acceptée, voire
            attendue par les autres acteurs de l'entreprise, que le <emphasis
            role="bold">rédacteur technique</emphasis> peut envisager la
            migration.
          </para>
          <para>
            Si vos documents sont disponibles en plusieurs langues, vous devez
            modifier les fichiers FrameMaker et effectuer la migration pour
            chaque langue. Si un projet de traduction dans une nouvelle langue
            se profile, mieux vaut effectuer la migration avant&nbsp;!
          </para>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="migration-de-framemaker-vers-dita-xml"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
        <section id="table-de-conversion-framemaker-vers-dita-xml">
          <title>Table de conversion FrameMaker vers DITA XML</title>
          <para>
            Lorsque les fichiers <ulink
            url="http://en.wikipedia.org/wiki/Adobe_FrameMaker">
            FrameMaker</ulink> sont prêts pour la migration et que la chaîne
            <ulink
                url="http://fr.wikipedia.org/wiki/Darwin_Information_Typing_Architecture">
              DITA
              XML</ulink> est parfaitement intégrée aux processus techniques et humains
              de la société, le <emphasis role="bold">rédacteur technique</emphasis> peut appliquer la table de
              conversion <footnote>
              <para>Bien que ce processus doive être rapide, je vous conseille
              de le faire juste après une livraison d'une nouvelle version du
              document pour avoir la marge de temps suffisante avant la
              livraison suivante, des petits ajustements étant toujours
              nécessaires.</para>
              </footnote>.
          </para>
          <para>
            Vous devriez maintenant être à même d'archiver les fichiers
            FrameMaker, puis de basculer totalement vers le format DITA XML.
          </para>
          <figure>
            <title>Application d'une table de conversion de FrameMaker vers DITA
            XML</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="../graphics/dita-migration.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>
            Appliquez bien sûr ce processus à un petit jeu de documents <footnote>
            <para>J'appelle <emphasis role="italic">jeu de documents</emphasis>
            tout ensemble d'informations liées qui ne partage aucun contenu avec
            un autre ensemble&nbsp;; si par exemple le document <emphasis
            role="italic">A</emphasis> partage une section avec le document
            <emphasis role="italic">B</emphasis>, le jeu de documents est
            <emphasis role="italic">A+B</emphasis>&nbsp;; si vous dupliquez la
            section partagée afin qu'elle ne soit plus commune à <emphasis
            role="italic">A</emphasis> et <emphasis role="italic">B</emphasis>,
            <emphasis role="italic">A</emphasis> et <emphasis
            role="italic">B</emphasis> deviennent des jeux distincts.</para>
            </footnote>, qui ne soit pas, si possible, d'une
            importance critique. Après ce premier succès, vous pourrez appliquer le
            processus aux autres jeux de documents.
          </para>
          <para>
            Vous pouvez maintenant progressivement modulariser et partager votre
            contenu dans le nouveau format afin de tirer parti au maximum de
            DITA XML. Vous pouvez pendant cette phase continuer à publier de
            nouvelles versions du document&nbsp;; la publication devrait
            d'ailleurs être beaucoup plus simple que sous FrameMaker.
          </para>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="migration-de-framemaker-vers-dita-xml"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
      <section id="migrer-de-framemaker-vers-dita-xml">
        <title>Migrer de FrameMaker vers DITA XML</title>
        <para>
          Le but de cette procédure est de&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              migrer son contenu <emphasis role="italic">FrameMaker</emphasis>
              vers <emphasis role="italic">DITA XML</emphasis> sans se plonger
              dans les arcanes des <emphasis role="italic">EDD
              FrameMaker</emphasis> (petits projets uniquement&nbsp;!),
            </para>
          </listitem>
          <listitem>
            <para>
              gérer la documentation technique au format DITA XML sans utiliser
              <emphasis role="italic">FrameMaker structuré</emphasis>.
            </para>
          </listitem>
        </itemizedlist>
        <orderedlist>
          <listitem>
            <para>
              <phrase>
                Restructurez le contenu et les styles de vos fichiers de contenu
                FrameMaker selon les concepts DITA XML.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Créez un document FrameMaker vide et importez-y tous les styles
                existants dans les fichiers à migrer.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Appliquez tous les styles disponibles à des paragraphes vides du
                document FrameMaker vide.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Enregistrez le document FrameMaker vide sous le nom
                <filename>styles.fm</filename>.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Ouvrez <emphasis role="italic">FrameMaker structuré
                11</emphasis> et créez un nouveau fichier DITA de type <emphasis
                role="italic">topic</emphasis>.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Choisissez
                <menuchoice>
                  <guimenu>
                    StructureTools
                  </guimenu>
                  <guimenuitem>
                    Exporter le catalogue d'éléments en tant qu'EDD
                  </guimenuitem>
                </menuchoice>
                et sauvegardez la nouvelle EDD sous le nom
                <filename>DITA-topic-edd.fm</filename>.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Ouvrez le fichier <filename>styles.fm</filename>, puis
                choisissez
                <menuchoice>
                  <guimenu>
                    Fichier
                  </guimenu>
                  <guimenuitem>
                    Importer les définitions d'éléments
                  </guimenuitem>
                </menuchoice>
                et importez les définitions d'éléments à partir de
                <filename>DITA-topic-edd.fm</filename>.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Répétez les trois étapes ci-dessus pour les autres types de
                topics DITA (task, reference, etc.), en modifiant les noms de
                fichiers comme il se doit.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Ouvrez le fichier <filename>styles.fm</filename>, puis
                choisissez
                <menuchoice>
                  <guimenu>
                    StructureTools
                  </guimenu>
                  <guimenuitem>
                    Générer le tableau de conversion
                  </guimenuitem>
                </menuchoice>
                .
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Modifiez le fichier de conversion et faites correspondre chaque
                style FrameMaker à une balise DITA XML.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Enregistrez le tableau de conversion sous le nom
                <filename>DITA2FM-conversion-table.fm</filename>.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Ouvrez un fichier de contenu FrameMaker sous FrameMaker
                structuré 11 et choisissez
                <menuchoice>
                  <guimenu>
                    StructureTools
                  </guimenu>
                  <guisubmenu>
                    Utilitaires
                  </guisubmenu>
                  <guimenuitem>
                    Structurer le document en cours
                  </guimenuitem>
                </menuchoice>
                .
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Sélectionnez <filename>DITA2FM-conversion-table.fm</filename> et
                cliquez sur <guilabel>Ajouter structure</guilabel>.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Enregistrez le fichier de contenu FrameMaker au format XML sans
                sélectionner d'application.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Ouvrez le fichier XML généré sous un éditeur DITA XML et
                corrigez la syntaxe DITA. Certains aspects de cette étape sont
                scriptables, mais il faut également procéder à des opérations
                manuelles de restructuration du contenu. Il vous faudra
                notamment placer à la main les références croisées, de
                préférence dans une <emphasis role="italic">reltable</emphasis>.
              </phrase>
            </para>
          </listitem>
        </orderedlist>
        <para>
          Pour générer les éléments permettant de construire un fichier
          .ditamap, vous pouvez par exemple utiliser des scripts Perl du
          type&nbsp;:
        </para>
        <programlisting>
          #!/usr/bin/perl
          open(INPUT,"&lt;$ARGV[0]") or die;
          @input_array=&lt;INPUT&gt;;
          close(INPUT);
          $input_scalar=join("",@input_array);
          # substitution
          $input_scalar =~ s#\&lt;body&gt;(.|\n)*?&lt;/body&gt;##ig;
          open(OUTPUT,&gt;$ARGV[0]") or die;
          print(OUTPUT $input_scalar);
          close(OUTPUT);
        </programlisting>
        <para>
          Vous pouvez également modulariser facilement le contenu à l'aide des
          ciseaux XML
          <ulink url="http://search.cpan.org/dist/XML-Twig/tools/xml_split/xml_split">
          xml_split </ulink>, ou utiliser le module Perl <ulink
          url="http://www.xmltwig.org/xmltwig/">XML::Twig</ulink>, ou encore ce
          <emphasis role="italic">one-liner</emphasis> Bash pour renommer les
          fichiers .dita d'après leur titre&nbsp;:
        </para>
        <programlisting>
          $ ack "&lt;title&gt;" *.dita| sed "s# #_#g;" | tr '[:upper:]' '[:lower:]' | \
          sed -E "s#(.*.dita)#mv \1#g;" | \
          sed -E "s#\.dita.*&lt;title&gt;(.*)&lt;/title&gt;#.dita \1.dita#g;"
        </programlisting>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="formats-structures-et-non-structures"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section id="une-architecture-documentaire-trop-complexe">
      <title>Une architecture documentaire trop complexe&nbsp;?</title>
      <para>
        DITA XML permet des gains de productivité importants par la réduction du
        volume source que le <emphasis role="bold">rédacteur
        technique</emphasis> crée, traduit et maintient. Ce gain de productivité
        se fait au prix d'une plus grande complexité.
      </para>
      <para>
        Si les projets DITA XML sont plus <emphasis
        role="italic">complexes</emphasis>, ils sont cependant moins <emphasis
        role="italic">compliqués</emphasis> que des projets reposant sur des
        formats plus traditionnels de type FrameMaker. En effet, DITA XML est
        une architecture rationnelle. Le <emphasis role="bold">rédacteur
        technique</emphasis> se trouve donc face à un comportement prédictible
        des outils qu'il utilise, loin des <emphasis role="italic">trucs et
        astuces</emphasis> destinés à contourner les bugs ou les fonctionnements
        erratiques des outils plus lourds.
      </para>
      <para>
        Le tableau suivant présente les différents niveaux de complexité induits
        par DITA XML et les solutions qui permettent au <emphasis
        role="bold">rédacteur technique</emphasis> de les maîtriser plus
        facilement&nbsp;:
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Complexité
              </entry>
              <entry>
                Solution
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                Syntaxe DITA XML
              </entry>
              <entry>
                IDE tel que XMetal ou nXML
              </entry>
            </row>
            <row>
              <entry>
                Gestion des relations entre des briques d'information atomiques
              </entry>
              <entry>
                CMS dédié tel que Componize ou DocZone
              </entry>
            </row>
            <row>
              <entry>
                Syntaxe de la feuille de style XSLT
              </entry>
              <entry>
                Logiciel graphique de création de feuilles de style
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Pour une petite équipe de rédaction technique, l'écueil principal sera
        la nécessité de mettre en œuvre la charte graphique de l'entreprise. Les
        autres aspects peuvent être gérés sans outil spécialisé, avec une bonne
        communication et une série de bonnes pratiques.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="format-structure-dita-xml"/>
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="du-document-a-la-base-documentaire-modulaire">
      <title>Du document à la base documentaire modulaire</title>
      <para>
        Le modèle du livre est encore prédominant pour créer et gérer
        l'information. Mais le contenu d'entreprise est souvent disséminé dans
        de nombreux documents, sous des formats hétérogènes. Ceci se traduit par
        des doublons, des incohérences, un coût de mise à jour et de traduction
        élevé, et des retards de livraison. Le <emphasis role="bold">rédacteur
        technique</emphasis> dispose cependant d'autres modèles, plus efficaces.
      </para>
      <para>
        Le format de rédaction structurée <ulink url="http://dita.xml.org/">DITA
        XML</ulink> propose de passer du modèle du livre à celui du de la
        <emphasis role="italic">base documentaire modulaire</emphasis>. Le
        contenu d'entreprise repose sur des briques uniques, qui peuvent être
        assemblées dynamiquement, à la demande, pour produire des documents sous
        différents formats cibles.
      </para>
      <figure>
        <title>Une documentation modulaire offre une souplesse inégalée</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../graphics/documentation-modulaire.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>
        Le volume de contenu source est minimisé, ce qui diminue les coûts de
        création, mise à jour et traduction du contenu d'entreprise. De plus, le
        <emphasis role="bold">rédacteur technique</emphasis> peut gérer les
        processus de rédaction, validation et traduction module par module. Les
        <emphasis role="italic">workflows</emphasis> peuvent ainsi être
        parallélisés, ce qui réduit les délais de mise sur le marché.
      </para>
      <para>
        Les fichiers DITA XML peuvent en outre être aisément centralisés sous un
        référentiel unique, tel qu'un ECM (système de gestion de contenu) ou un
        VCS (logiciel de gestion de versions). Le capital immatériel de la
        société est ainsi préservé.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="format-structure-dita-xml"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="un-langage-a-balises"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="typologie-de-haut-niveau-information"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="organisation-a-la-demande-du-contenu"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="single-sourcing-un-format-source-plusieurs-formats-cibles"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="les-topics-modules-information-de-base-dita"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="gerer-son-contenu-dita-xml-avec-ou-sans-cms"/>
          </para>
        </listitem>
      </itemizedlist>
      <section id="un-langage-a-balises">
        <title>Un langage à balises</title>
        <para>
          <ulink url="http://dita.xml.org/">DITA XML</ulink> est un langage à
          balises&nbsp;: le <emphasis role="bold">rédacteur technique</emphasis>
          structure l'information dans des fichiers sources sans mise en page,
          similaires aux fichiers sources de code informatique. L'utilisateur
          reçoit un document cible, par exemple un fichier PDF, où les balises
          sont remplacées par une mise en forme typographique.
        </para>
        <para>
          Si votre entreprise fournit à ses clients une documentation technique
          au format Word, le <emphasis role="bold">rédacteur
          technique</emphasis> et l'utilisateur disposent des mêmes supports
          d'information (il n'y a pas de différenciation entre le fichier source
          et le fichier cible). Ce qui semble a priori la solution la plus
          simple s'avère cependant peu efficace en termes de productivité de
          l'équipe de rédaction technique et de structuration de l'information.
        </para>
        <para>
          Avec un format texte tel que DITA, le <emphasis role="bold">rédacteur
          technique</emphasis> et le lecteur disposent de supports largement
          différents&nbsp;:
        </para>
        <informaltable>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  Public
                </entry>
                <entry>
                  Description
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  Rédacteur technique
                </entry>
                <entry>
                  Le <emphasis role="bold">rédacteur technique</emphasis>
                  manipule des fichiers sources&nbsp;; il utilise les balises
                  pour construire le document en marquant les éléments
                  d'information qu'il crée ou réutilise. Les balises sont
                  imbriquées comme des poupées russes organisées selon une
                  syntaxe rigoureuse. Le fichier source n'est pas au format
                  WYSIWYG&nbsp;: la mise en page sera appliquée lors de la
                  transformation des fichiers sources en fichiers cibles
                  (autrement dit, lors de la génération des livrables). Tout au
                  plus, certains logiciels graphiques tels XMetal, Oxygen ou
                  FrameMaker structuré proposent-ils le format WYSIWYM (what you
                  see is what you mean), où les balises sont remplacées à
                  l'écran par une mise en forme générique, différente de
                  l'aspect final du document. Je trouve cependant que l'un des
                  intérêts d'avoir recours à un langage à balises est de voir
                  exactement ce que l'on fait en manipulant soi-même les balises
                  sans en déléguer l'interprétation à un logiciel graphique.
                </entry>
              </row>
              <row>
                <entry>
                  Utilisateur
                </entry>
                <entry>
                  Seul le contenu est présenté au lecteur dans le fichier
                  cible&nbsp;; le texte marqué par des balises dans les fichiers
                  sources a une mise en valeur typographique dont le sens est
                  explicité dans la section <emphasis role="italic">Conventions
                  typographiques</emphasis> du document final.
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
          Un fichier source DITA XML mélange du texte et des balises, délimitées
          par les signes &lt; et &gt;. Le texte proprement dit est encapsulé
          dans un jeu de balises ouvrantes de type &lt;balise&gt; et de balises
          fermantes de type &lt;/balise&gt; selon le schéma
          &lt;balise&gt;texte&lt;/balise&gt;. Tout texte entré hors d'une balise
          ouvrante et fermante est incorrect et produit un fichier non valide.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="du-document-a-la-base-documentaire-modulaire"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="typologie-de-haut-niveau-information">
        <title>Typologie de haut niveau de l'information</title>
        <para>
          <ulink url="http://dita.xml.org/">DITA XML</ulink> propose au
          <emphasis role="bold">rédacteur technique</emphasis> une typologie de
          haut niveau qui est une véritable aide à la structuration du contenu.
        </para>
        <para>
          S'il crée un nouveau document au format FrameMaker, DocBook ou
          traitement de texte, le <emphasis role="bold">rédacteur
          technique</emphasis> se trouve face à une page blanche. Selon sa
          rigueur professionnelle, l'information transmise à l'utilisateur
          oscillera entre les deux pôles suivants&nbsp;:
        </para>
        <informaltable>
          <tgroup cols="2">
            <tbody>
              <row>
                <entry>
                  Organisation rationnelle
                </entry>
                <entry>
                  L'utilisateur dispose d'un accès séquentiel rapide et aisé à
                  l'information dont il a besoin.
                </entry>
              </row>
              <row>
                <entry>
                  Magma informatif
                </entry>
                <entry>
                  L'utilisateur doit lire intégralement toute une section, voire
                  le document en sa totalité pour espérer trouver des
                  renseignements utiles.
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
          Lorsqu'il crée un document DITA XML, en revanche, le <emphasis role="bold">rédacteur
          technique</emphasis> doit d'emblée choisir le modèle <footnote>
          <para>Dans la pratique, un schéma XSD.</para>
          </footnote> qui correspond au type d'information qu'il veut
          présenter. De base, DITA XML propose les types d'information suivants<footnote>
          <para>
            DITA XML propose trois types d'information de base, tandis que la
            méthode Information Mapping en propose sept.</para>
          </footnote>&nbsp;:
        </para>
        <informaltable>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  Type d'information
                </entry>
                <entry>
                  Description
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  Concept
                </entry>
                <entry>
                  Texte généraliste du type introduction ou présentation.
                </entry>
              </row>
              <row>
                <entry>
                  Task
                </entry>
                <entry>
                  Procédure pas à pas destinée à réaliser une tâche.
                </entry>
              </row>
              <row>
                <entry>
                  Reference
                </entry>
                <entry>
                  Information de référence du type explication de paramètres de
                  commandes.
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
          Chacune de ces catégories de haut niveau propose un jeu de balises de
          plus bas niveau qui lui est propre. Si le <emphasis
          role="bold">rédacteur technique </emphasis> rédige un document
          technique, il y a toutes les chances pour que l'information qu'il a
          collectée et qu'il doit organiser fasse partie de l'une de ces trois
          catégories
          <footnote>
          <para>S'il s'avère qu'il a réellement besoin d'une autre catégorie, il
          peut la créer <emphasis role="italic">via</emphasis> une
          spécialisation.</para> </footnote>. Cette division en types
          d'information oblige donc d'entrée de jeu le <emphasis
          role="bold">rédacteur technique</emphasis> à structurer
          l'information. L'utilisateur y gagne en facilité et rapidité d'accès à
          l'information et en utilisabilité globale de la documentation
          technique.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="du-document-a-la-base-documentaire-modulaire"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="organisation-a-la-demande-du-contenu">
        <title>Organisation à la demande du contenu</title>
        <para>
          Les briques d'information peuvent être assemblées à la demande dans
          des structures de table des matières externes, les <emphasis
          role="italic">ditamap</emphasis>.
        </para>
        <para>
          L'organisation de l'information sous <ulink
          url="http://dita.xml.org/">DITA XML</ulink> n'est pas figée.  Les
          briques peuvent être organisées dans différentes structures
          hiérarchiques, selon l'évolution des besoins. Si le <emphasis
          role="bold">rédacteur technique</emphasis> a pris soin de construire
          des briques d'information atomiques et génériques, il peut, à l'instar
          d'un constructeur automobile proposant sans cesse de nouveaux modèles
          par assemblage d'éléments standardisés, proposer par exemple les
          documents suivants&nbsp;:
        </para>
        <informaltable>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  Type de document
                </entry>
                <entry>
                  Contenu
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  Guide de l'utilisateur
                </entry>
                <entry>
                  Thèmes systématiquement organisés en concept et procédures pas
                  à pas.
                </entry>
              </row>
              <row>
                <entry>
                  Document de présentation
                </entry>
                <entry>
                  Concepts.
                </entry>
              </row>
              <row>
                <entry>
                  Quikstart
                </entry>
                <entry>
                  Procédures pas à pas.
                </entry>
              </row>
              <row>
                <entry>
                  Manuel de référence
                </entry>
                <entry>
                  Informations de référence.
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
          Pour ce faire, le <emphasis role="bold">rédacteur technique</emphasis>
          prendra soin de placer les éléments liés à un contexte particulier
          dans les structures <emphasis role="italic">ditamap</emphasis> et non
          dans les fichiers de contenu DITA XML. En particulier, les références
          croisées doivent être indiquées dans une <emphasis
          role="italic">reltable</emphasis> placée dans la <emphasis
          role="italic">ditamap</emphasis>&nbsp;: si le document <emphasis
          role="italic">A</emphasis> doit renvoyer au document <emphasis
          role="italic">B</emphasis> dans la <emphasis
          role="italic">ditamap</emphasis> <emphasis role="italic">1</emphasis>,
          il doit pouvoir être également utilisé sans modification dans la
          <emphasis role="italic">ditamap</emphasis> <emphasis
          role="italic">2</emphasis>, où le document <emphasis
          role="italic">B</emphasis> n'est pas inclus.
        </para>
        <para>
          L'organisation des répertoires de travail doit également permettre
          l'utilisation de liens relatifs, notamment vers les images, qui ne
          seront jamais cassés.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="du-document-a-la-base-documentaire-modulaire"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="single-sourcing-un-format-source-plusieurs-formats-cibles">
        <title>Le single-sourcing&nbsp;: un format source, plusieurs formats
        cibles</title>
        <para>
          Le <emphasis role="italic">single-sourcing</emphasis> est un sujet qui
          a longtemps divisé les <emphasis role="bold">rédacteurs
          techniques</emphasis>&nbsp;: des supports de rédaction technique
          différents, tels qu'une aide en ligne et un manuel imprimé,
          doivent-ils proposer un contenu radicalement différent ou peuvent-ils
          être générés à partir du même contenu source&nbsp;?
        </para>
        <para>
          Les contraintes de productivité et la réduction des coûts aidant, le
          débat a été tranché en faveur du <emphasis
          role="italic">single-sourcing</emphasis>. Le gain qualitatif,
          discutable, ne compense pas le coût de créer, maintenir et traduire
          une version source différente pour chaque version cible.
        </para>
        <figure>
          <title>Un seul jeu d'informations, une multiplicité de formats de
          sortie</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/single-sourcing.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>
          Si le <emphasis role="bold">rédacteur technique</emphasis> pratique le
          <emphasis role="italic">single-sourcing</emphasis>, il doit cependant
          sélectionner en début de projet le paradigme sur lequel il se
          base&nbsp;: le livre ou l'aide en ligne. Pendant longtemps, les outils
          proposés reposaient soit sur un document de type livre (Word, ou
          FrameMaker, essentiellement) qui pouvait être exporté au format d'aide
          en ligne, soit sur un fichier source (RTF) d'aide Windows, pour
          générer un PDF. Une forte perte d'information de navigation (index,
          références croisées, liens, etc.) intervenait souvent lors de
          l'exportation.
        </para>
        <para>
          DITA XML propose un modèle agnostique quant au format cible. Les
          fichiers sources, bien que basés sur un modèle modulaire proche de
          celui de l'aide en ligne, peuvent facilement être exportés sous forme
          de fichier PDF, d'aide en ligne, de pages HTML liées ou autre, sans
          aucune perte d'information.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="du-document-a-la-base-documentaire-modulaire"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="les-topics-modules-information-de-base-dita">
        <title>Les topics, modules d'information de base DITA</title>
        <para>
          Les <ulink
          url="http://docs.oasis-open.org/dita/v1.0/archspec/topicover.html">
          topics</ulink> sont les plus petites unités d'information autonomes
          gérées par <emphasis role="italic">DITA XML</emphasis>. Chaque
          <emphasis role="italic">topic</emphasis> a un titre et un corps de
          texte. Il ne traite que d'un seul sujet. Il appartient donc au
          <emphasis role="bold">rédacteur technique</emphasis> de se baser sur
          la modularité proposée par DITA XML pour bien structurer
          l'information.
        </para>
        <para>
          Les <emphasis role="italic">topics</emphasis> sont sémantiquement
          typés. Il existe idéalement un type de <emphasis
          role="italic">topic</emphasis> par type d'information. DITA XML
          propose par défaut des <emphasis role="italic">topics</emphasis>
          adaptés à la documentation des logiciels (description de concepts et
          de tâches, liste de commandes, etc.), mais de nouveaux types de
          <emphasis role="italic">topics</emphasis> peuvent être créés pour
          répondre à d'autres besoins.
        </para>
        <para>
          Les <emphasis role="italic">topics</emphasis> sont une des différences
          principales entre <emphasis role="italic">DITA XML</emphasis> et
          <emphasis role="italic">DocBook</emphasis>, qui ne propose pas de
          typologie des briques d'information.
        </para>
        <para>
          Les <emphasis role="italic">topics</emphasis> sont généralement
          stockés <emphasis role="italic">à plat</emphasis> dans des répertoires
          divisés par type de <emphasis role="italic">topic</emphasis>. Ils sont
          organisés hiérarchiquement dans des fichiers <emphasis
          role="italic">.ditamap</emphasis> et peuvent être partagés entre
          différents documents. Les titres des modules ne sont pas affectés d'un
          niveau de titre. La structure des modules étant parfaitement homogène,
          un module peut avoir un niveau 3 dans un document donné, et un niveau
          1 dans un autre document, sans qu'il y ait besoin de modifier en quoi
          que ce soit les <emphasis role="italic">topics</emphasis>.
        </para>
        <para>
          Les unités d'information atomiques <footnote>
          <para>Pas au sens XPath.</para> </footnote> telles que des remarques,
          des paragraphes, voire des phrases ou des segments de phrase, qui ne
          peuvent pas être munis d'un titre, ne forment pas des <emphasis
          role="italic">topics</emphasis>. Elles peuvent être cependant
          partagées <emphasis role="italic">via</emphasis> le mécanisme
          <emphasis role="italic">conref</emphasis>, similaire au mécanisme
          <emphasis role="italic">Xinclude</emphasis> proposé par DocBook.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="du-document-a-la-base-documentaire-modulaire"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="gerer-son-contenu-dita-xml-avec-ou-sans-cms">
        <title>Gérer son contenu DITA XML avec ou sans CMS&nbsp;?</title>
        <para>
          L'architecture <ulink url="http://dita.xml.org/">DITA XML</ulink> ne
          propose pas de mécanisme de <emphasis
          role="italic">workflow</emphasis> documentaire natif. Les <emphasis
          role="italic">workflows</emphasis> sont pourtant un élément important
          d'un processus efficace de gestion du cycle de vie du contenu.
        </para>
        <para>
          Les CMS gèrent également les métadonnées, ce qui permet une recherche plus
          efficace de l'information existante, et les rétroliens <footnote>
          <para>Le <emphasis role="bold">rédacteur technique</emphasis> peut
          ainsi voir où un élément d'information est inclus&nbsp;; lors de la
          mise à jour de cet élément, il peut alors juger si l'élément modifié
          sera toujours valable dans les différents contextes.</para>
          </footnote>.
        </para>
        <para>
          La plupart des entreprises sont réticentes à mettre en place des CMS,
          outils dédiés aux <emphasis role="italic">workflows</emphasis>. Elles
          ont d'ailleurs parfois connu des échecs de mise en place de telles
          solutions part le passé.
        </para>
        <para>
          De plus, l'un des grands avantages de DITA XML, c'est de s'intégrer
          directement dans le système d'information en place. Chez les éditeurs de
          logiciels, notamment, rien de plus facile que de venir se greffer sur le
          système de gestion des sources en place, qu'il s'agisse de Git <footnote>
          <para>Il est possible, quoiqu'un peu complexe, de mettre en place des
          <emphasis role="italic">workflows</emphasis> sous Git <emphasis
          role="italic">via</emphasis> des branches.</para> </footnote>, de
          Subversion ou de SourceSafe. À budget quasi nul.  Raison de plus pour
          ne pas investir du temps et de l'argent dans un CMS. Les gains de
          productivité spectaculaires reportés par certaines entreprises suite à
          la mise en place d'un CMS DITA XML ont cependant de quoi faire
          réfléchir. Ainsi, Epson America a pu réutiliser jusqu'à 90 % du
          contenu existant sur de nouveaux projets.
        </para>
        <para>
          Si l'on opte pour un CMS, celui-ci doit clairement supporter
          DITA&nbsp;: on ne gère pas un jeu de briques d'information comme un
          document monolithique. Adieu donc SharePoint ou Alfresco, il faut se
          tourner vers des solutions dédiées telles que <ulink
          url="http://www.componize.com/">Componize</ulink> ou <ulink
          url="http://www.doczone.com">DocZone</ulink>.
        </para>
        <para>
          Quel que soit le choix initial, il est possible à tout instant de
          changer de stratégie, sans remettre en cause l'existant.
          L'architecture DITA XML n'est en effet liée à aucun référentiel
          particulier. Rien n'interdit donc de commencer à gérer ses projets
          sans CMS, puis d'avoir recours à une telle solution si les bénéfices
          de ce choix deviennent manifestes.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="du-document-a-la-base-documentaire-modulaire"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section id="cas-concret-documentation-de-nufirewall">
      <title>Cas concret&nbsp;: documentation de NuFirewall</title>
      <para>
        La documentation de <ulink
        url="http://linuxfr.org/news/nufirewall-le-pare-feu-libre-sans-prise-de-t%C3%AAte">
        NuFirewall</ulink>, qui a été perçue par la presse comme <ulink
        url="http://www.linformaticien.com/tests/id/20068/categoryid/48/edenwall-nufirewall-le-pare-feu-nouvelle-generation.aspx">
        un point fort du produit</ulink>, a été réalisée sous DITA.
      </para>
      <para>
        Si je n'avais pas utilisé un format qui favorise au maximum la
        réutilisation de l'information, je n'aurais pas autant pu me consacrer à
        l'essentiel&nbsp;: le contenu.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="format-structure-dita-xml"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="partager-des-blocs-information-atomiques-avec-les-conref"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="fournir-une-information-ciblée-avec-le-texte-conditionnel-ditaval"/>
          </para>
        </listitem>
      </itemizedlist>
      <section id="partager-des-blocs-information-atomiques-avec-les-conref">
        <title>Partager des blocs d'information atomiques avec les <emphasis
        role="italic">conref</emphasis>
        </title>
        <para>
          Lorsque le <emphasis role="bold">rédacteur technique</emphasis> veut
          réutiliser des blocs d'information <emphasis role="italic">DITA
          XML</emphasis> plus petits qu'une section, il doit les partager au
          niveau des fichiers de contenu <emphasis role="italic">dita</emphasis>
          et non dans les structures de table des matières <emphasis
          role="italic">ditamap</emphasis>, grâce au mécanisme <ulink
          url="http://docs.oasis-open.org/dita/v1.1/OS/archspec/conref.html">
          conref</ulink>.
        </para>
        <para>
          Le principe des <emphasis role="italic">conref</emphasis> est
          simple&nbsp;: lorsqu'un <emphasis role="italic">conref</emphasis> est
          mentionné au niveau d'un nœud XML donné, tout le contenu du nœud cible
          est remplacé par le contenu du nœud source.
        </para>
        <figure>
          <title>Partage de blocs d'information de granulométrie large entre les
          <emphasis role="italic">ditamap</emphasis>
          </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/ditamap.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>
          Une différence notable entre le mécanisme des <emphasis
          role="italic">conref</emphasis> et le mécanisme XML des <ulink
          url="http://en.wikipedia.org/wiki/XInclude" >xinclude</ulink>, c'est
          que le nœud source doit être conforme au schéma XSD du fichier source
          <emphasis role="italic">et</emphasis> du fichier cible. Ce formalisme
          rigoureux, s'il s'avère moins souple et oblige parfois à quelques
          acrobaties, rend les <emphasis role="italic">conref</emphasis>
          beaucoup plus lisibles que les <emphasis
          role="italic">xinclude</emphasis> et favorise leur utilisation.
        </para>
        <figure>
          <title>Partage de blocs d'information de granulométrie fine entre les
          sections DITA</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/conref.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="cas-concret-documentation-de-nufirewall"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="centraliser-les-conref-dans-un-fichier-unique"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="utiliser-le-nœud-xml-de-plus-bas-niveau"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="prendre-en-compte-les-contraintes-de-traduction"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="imbriquer-les-conref"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="maximiser-lutilisation-des-conref-pour-faire-baisser-les-coûts"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="proteger-les-informations-confidentielles"/>
            </para>
          </listitem>
        </itemizedlist>
        <section id="centraliser-les-conref-dans-un-fichier-unique">
          <title>Centraliser les conref dans un fichier unique</title>
          <para>
            Pour favoriser l'utilisation des <ulink
            url="http://docs.oasis-open.org/dita/v1.1/OS/archspec/conref.html">
            conref</ulink> au sein d'une équipe de <emphasis
            role="bold">rédacteurs techniques</emphasis>, et également pour
            simplifier la maintenance des <emphasis
            role="italic">conref</emphasis>, il s'avère très efficace de
            centraliser tous les <emphasis role="italic">conref</emphasis> dans
            un fichier DITA dédié.
          </para>
          <para>
            Il est <emphasis role="italic">a priori</emphasis> plus simple, pour
            réutiliser un contenu d'un fichier <emphasis role="italic">DITA
            XML</emphasis> existant, de pointer vers ce contenu sans l'extraire
            de son contexte d'origine. Cependant, un des grands principes de la
            réutilisation du contenu est de décontextualiser le contenu. Il est
            donc à terme beaucoup plus efficace pour le <emphasis
            role="bold">rédacteur technique</emphasis> d'extraire le contenu
            réutilisé de son fichier d'origine et de le placer dans un fichier
            ne contenant que des sources de <emphasis
            role="italic">conref</emphasis>. Il est en effet beaucoup plus
            facile de placer tous les éléments sources dans un référentiel
            unique que de devoir chercher les différentes sources dans une
            multitude de fichiers.
          </para>
          <figure>
            <title>Gérer les <emphasis role="italic">conref</emphasis> de
            manière décentralisée est peu efficace</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="../graphics/conref-non-centralises.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>
            Les <emphasis role="italic">conref</emphasis> sont en effet résolus
            à la compilation, même si les fichiers contenant les valeurs sources
            ne sont pas référencés dans le fichier <emphasis
            role="italic">DITAMAP</emphasis> permettant de générer le livrable
            (ce qui veut dire également que les fichiers contenant les valeurs
            sources des <emphasis role="italic">conref</emphasis> peuvent se
            trouver dans un répertoire de niveau supérieur à celui du <emphasis
            role="italic">DITAMAP</emphasis>).
          </para>
          <figure>
            <title>Bonne gestion des <emphasis role="italic">conref</emphasis>
            </title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="../graphics/conref.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>
            Les fichiers de contenu référencés dans des structures <emphasis
            role="italic">DITAMAP</emphasis> ne contiennent donc que des
            <emphasis role="italic">conref</emphasis> cibles, et un fichier
            central fédère tous les <emphasis role="italic">conref</emphasis>
            sources&nbsp;; il contient éventuellement également quelques
            références internes à des <emphasis role="italic">conref</emphasis>
            cibles.
          </para>
          <para>
            Ce fichier central doit être de même type (<emphasis
            role="italic">task</emphasis>, <emphasis
            role="italic">concept</emphasis>, <emphasis
            role="italic">reference</emphasis>, etc.) que les fichiers de
            contenu, ou du moins du type <emphasis
            role="italic">composite</emphasis>, qui accepte tous types de
            structures DITA XML. Pour des raisons d'organisation, je trouve
            personnellement efficace de créer un fichier central par type de
            <emphasis role="italic">topic</emphasis> DITA XML, et donc de même
            type, pour partager les informations propres à chaque type. Je
            réserve le type <emphasis role="italic">composite</emphasis> à un
            fichier central <emphasis role="italic">fourre-tout</emphasis>
            contenant des informations partagées entre différents types de
            <emphasis role="italic">topics</emphasis>.
          </para>
          <para>
            Tous les <emphasis role="italic">conref</emphasis> sources d'un
            fichier donné doivent avoir un ID unique dans ce fichier&nbsp;;
            veillez à utiliser des noms explicites pour les humains, vos
            fichiers <emphasis role="italic">dita</emphasis> contenant des
            <emphasis role="italic">conref</emphasis> cibles deviendront sinon
            rapidement illisibles&nbsp;!
          </para>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="partager-des-blocs-information-atomiques-avec-les-conref"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
        <section id="utiliser-le-nœud-xml-de-plus-bas-niveau">
          <title>Utiliser le nœud XML de plus bas niveau</title>
          <para>
            Le <emphasis role="bold">rédacteur technique</emphasis> doit
            utiliser comme source du <ulink
            url="http://docs.oasis-open.org/dita/v1.1/OS/archspec/conref.html">
            conref</ulink> le nœud <emphasis role="italic">DITA XML</emphasis>
            de plus bas niveau contenant l'information à partager.
          </para>
          <para>
            Le but des <emphasis role="italic">conref</emphasis> étant de gérer
            des blocs d'information de faibles dimensions, il est logique de les
            manipuler au niveau de la plus petite structure XML encapsulant
            l'information, même si cette structure, pour être compatible avec le
            schéma XSD de la section <emphasis role="italic">DITA XML</emphasis>
            où elle intervient, doit elle-même être incluse dans des structures
            XML plus grandes.
          </para>
          <figure>
            <title>Placement du <emphasis role="italic">conref</emphasis> sur le
            nœud XML de plus bas niveau</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="graphics/conref-bas-niveau.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>
            Vous voulez par exemple réutiliser la phrase <emphasis
            role="italic">Cliquez sur OK.</emphasis> Vous ne pouvez cependant
            pas indiquer dans le fichier contenant les <emphasis
            role="italic">conref</emphasis> sources uniquement le code
            suivant&nbsp;:
          </para>
          <programlisting>
            &lt;cmd&gt;Cliquez sur OK.&lt;/cmd&gt;
          </programlisting>
          <para>
            Pour être conforme au schéma XSD, votre code doit au moins être
            structuré comme suit&nbsp;:
          </para>
          <programlisting>
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;!DOCTYPE task PUBLIC "-//OASIS//DTD DITA 1.2 Task//EN" /usr/share/dita-ot/dtd/technicalContent/dtd/task.dtd""&gt;
            &lt;task id="shared" xml:lang="fr-fr"&gt;
            &lt;title&gt;Conref source&lt;/title&gt;
            &lt;taskbody&gt;
            &lt;steps&gt;
            &lt;step&gt;
            &lt;cmd&gt;
            Cliquez sur OK.
            &lt;/cmd&gt;
            &lt;/step&gt;
            &lt;/steps&gt;
            &lt;/taskbody&gt;
          </programlisting>
          <para>
            Il s'agit maintenant de placer un ID sur une structure XML afin de
            pouvoir réutiliser le contenu de cette structure. En l'occurrence,
            c'est une étape unique comprenant une commande unique que vous
            souhaitez réutiliser.
          </para>
          <para>
            Il est alors préférable d'utiliser la syntaxe suivante&nbsp;:
          </para>
          <programlisting>
            &lt;step&gt;
            &lt;cmd id="click-ok"&gt;
            Cliquez sur OK.
            &lt;/cmd&gt;
            &lt;/step&gt;
          </programlisting>
          <para>
            plutôt que la suivante&nbsp;:
          </para>
          <programlisting>
            &lt;step id="click-ok"&gt;
            &lt;cmd&gt;
            Cliquez sur OK.
            &lt;/cmd&gt;
            &lt;/step&gt;
          </programlisting>
          <para>
            En effet, dans le premier cas, vous pourrez utiliser le <emphasis
            role="italic">conref</emphasis> même si le nœud supérieur
            (&lt;step&gt;) contient d'autres nœuds que &lt;step&gt; (par exemple
            &lt;info&gt;).
          </para>
          <figure>
            <title>Placement du <emphasis role="italic">conref</emphasis> sur le
            nœud XML de plus haut niveau</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="graphics/conref-haut-niveau.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>
            Dans le 2<superscript>e</superscript> cas, tout le contenu du nœud
            &lt;step&gt; sera remplacé par la valeur du <emphasis
            role="italic">conref</emphasis> source. Par exemple, dans le cas
            suivant, tout le contenu du nœud sera absent des livrables&nbsp;:
          </para>
          <programlisting>
            &lt;step id="click-ok"&gt;
            &lt;cmd/&gt;
            &lt;info&gt;
            Si vous ne savez pas lire, c'est le bouton vert.
            &lt;/info&gt;
            &lt;/step&gt;
          </programlisting>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="partager-des-blocs-information-atomiques-avec-les-conref"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
        <section id="prendre-en-compte-les-contraintes-de-traduction">
          <title>Prendre en compte les contraintes de traduction</title>
          <para>
            L'unité d'information <emphasis role="italic">DITA XML</emphasis> la
            plus petite est le nœud &lt;ph&gt;. Le rédacteur technique doit
            cependant veiller à ne lui appliquer le mécanisme <emphasis
            role="italic">conref</emphasis> que pour une phrase complète ou un
            terme qui ne sera jamais traduit (par exemple, le nom de la société
            ou d'un produit). De gros problèmes apparaissent sinon lors de la
            traduction dans d'autres langues.
          </para>
          <figure>
            <title>Les phrases se découpent différemment selon les
            langues</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="graphics/traduction-conref.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <informalexample>
            <para>
              Si vous décidez de pousser la granulométrie au niveau du segment
              de phrase et que vous définissez les <emphasis
              role="italic">conref</emphasis> suivants&nbsp;:
            </para>
            <programlisting>
              &lt;ph id="click"&gt;Click the&lt;/ph&gt;

              &lt;ph id="blue"&gt;blue&lt;/ph&gt;

              &lt;ph id="arrow"&gt;arrow&lt;/ph&gt;
            </programlisting>
            <para>
              Vous pouvez maintenant utiliser le code suivant&nbsp;:
            </para>
            <programlisting>
              &lt;p&gt;
              &lt;ph conref="shared.dita/click"/&gt;
              &lt;ph conref="shared.dita/blue"/&gt;
              &lt;ph conref="shared.dita/arrow"/&gt;.
              &lt;/p&gt;
            </programlisting>
            <para>
              pour que soit générée la phrase <emphasis role="italic">Click the
              blue arrow</emphasis>.
            </para>
            <para>
              Essayons maintenant de créer une version française de cette
              phrase.  Nous traduisons donc les <emphasis
              role="italic">conref</emphasis> comme suit&nbsp;:
            </para>
            <programlisting>
              &lt;ph id="click"&gt;Cliquez sur la&lt;/ph&gt;

              &lt;ph id="blue"&gt;bleue&lt;/ph&gt;

              &lt;ph id="arrow"&gt;flèche&lt;/ph&gt;
            </programlisting>
            <para>
              Nous obtenons alors la phrase <emphasis role="italic">Cliquez sur
              la bleue flèche</emphasis>.
            </para>
          </informalexample>
          <para>
            Pour pallier ce problème, il faudrait réorganiser l'ordre des
            <emphasis role="italic">conref</emphasis> dans le fichier DITA
            traduit, ce qui est difficilement gérable et fait perdre tout
            l'intérêt du mécanisme.  Sans compter que des problèmes pires que ce
            cas d'école peuvent conduire à complètement abandonner dans la
            langue cible les <emphasis role="italic">conref</emphasis> utilisés
            dans la langue source (je n'ai pas d'exemple concret à offrir, ayant
            toujours évité de tomber dans ce genre de travers.)
          </para>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="partager-des-blocs-information-atomiques-avec-les-conref"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
        <section id="imbriquer-les-conref">
          <title>Imbriquer les conref</title>
          <para>
            Pour des raisons de facilité de mise à jour et de maintenance du
            contenu <emphasis role="italic">DITA XML</emphasis>, le <emphasis
            role="bold">rédacteur technique</emphasis> doit limiter l'effet
            <emphasis role="italic">poupée russe</emphasis> et ne pas trop
            imbriquer les <ulink
            url="http://docs.oasis-open.org/dita/v1.1/OS/archspec/conref.html" >
            conref</ulink>.  Un seul niveau d'imbrication (un <emphasis
            role="italic">conref</emphasis> imbriqué dans un autre) me semble le
            seuil au-delà duquel le contenu peut vite devenir ingérable.
          </para>
          <para>
            Dans l'exemple ci-dessous, le <emphasis
            role="italic">conref</emphasis> source <emphasis
            role="italic">see-admin-guide</emphasis> contient le <emphasis
            role="italic">conref</emphasis> cible <emphasis
            role="italic">admin-guide-title</emphasis>&nbsp;:
          </para>
          <informalexample>
            <programlisting>
              &lt;p id="see-admin-guide"&gt;
              Pour de plus amples informations, voir le &lt;ph
              conref="shared.dita/admin-guide-title"/&gt;.
              &lt;/p&gt;
            </programlisting>
          </informalexample>
          <para>
            Ce niveau de complexité est gérable. Mais si le <emphasis
            role="italic">conref</emphasis> source <emphasis
            role="italic">admin-guide-title</emphasis> contient lui même un
            <emphasis role="italic">conref</emphasis> cible, le code <emphasis
            role="italic">DITA XML</emphasis> devient un vrai plat de spaghettis
            (sans compter les risques de référence circulaire). Les <emphasis
            role="italic">conref</emphasis> peuvent théoriquement être combinés
            à l'infini, mais les problèmes pratiques que cela engendre peuvent
            également être infinis&nbsp;!
          </para>
          <figure>
            <title>Imbriquer les <emphasis role="italic">conref</emphasis> sur
            plusieurs niveaux&nbsp;: puissant, mais dangereux&nbsp;!</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="graphics/imbriquer-conref.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>
            Pour résumer la situation&nbsp;:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                Il est tout à fait possible d'imbriquer plusieurs <emphasis
                role="italic">conref</emphasis> sources. Le seul effet de bord
                négatif porte sur la lisibilité du fichier contenant les
                <emphasis role="italic">conref</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                L'imbrication de <emphasis role="italic">conref</emphasis>
                sources et cibles est possible mais rapidement ingérable.
              </para>
            </listitem>
            <listitem>
              <para>
                Il est impossible d'imbriquer des <emphasis
                role="italic">conref</emphasis> cibles&nbsp;: le contenu du
                <emphasis role="italic">conref</emphasis> du niveau supérieur
                écrasera les valeurs des <emphasis
                role="italic">conref</emphasis> du niveau inférieur.
              </para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="partager-des-blocs-information-atomiques-avec-les-conref"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
        <section id="maximiser-lutilisation-des-conref-pour-faire-baisser-les-coûts">
          <title>Maximiser l'utilisation des conref pour faire baisser les
          coûts</title>
          <para>
            Recourir aux <ulink
            url="http://docs.oasis-open.org/dita/v1.1/OS/archspec/conref.html">
            conref</ulink> est le meilleur moyen dont dispose le <emphasis
            role="bold">rédacteur technique</emphasis> pour faire baisser
            spectaculairement les coûts et les délais de publication de son
            contenu <emphasis role="italic">DITA XML</emphasis>, surtout pour
            les <emphasis role="italic">documents multilingues</emphasis>.
          </para>
          <para>
            De par la nature des informations qu'elles contiennent, les sections
            de type <emphasis role="italic">task</emphasis> ont un taux plus
            élevé de réutilisation du contenu que celles de type <emphasis
            role="italic">concept</emphasis> ou <emphasis
            role="italic">reference</emphasis>.
          </para>
          <figure>
            <title>Les <emphasis role="italic">conref</emphasis> modularisent de
            petits blocs d'information</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="graphics/maximiser-conref.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>
            Comme dans l'exemple ci-dessous, il n'est pas rare d'obtenir
            rapidement des fichiers dont la seule valeur unique est le titre, le
            reste du contenu, <emphasis role="italic">pourtant unique</emphasis>
            (car il assemble de manière unique des blocs d'information non
            uniques), étant généré par des <emphasis
            role="italic">conref</emphasis>.
          </para>
          <informalexample>
            <programlisting>
              &lt;?xml version="1.0" encoding="utf-8"?&gt;
              &lt;!DOCTYPE task PUBLIC "-//OASIS//DTD DITA 1.2 Task//EN" "/usr/share/dita-ot/dtd/technicalContent/dtd/task.dtd"&gt;
              &lt;task id="display-trends" xml:lang="fr-fr"&gt;
              &lt;title&gt;Afficher les tendances&lt;/title&gt;
              &lt;taskbody&gt;
              &lt;context audience="basic"&gt;
              &lt;note type="restriction" audience="advanced"&gt;
              &lt;ul&gt;
              &lt;li&gt;
              &lt;ph conref="shared.dita/ip-control"/&gt;
              &lt;/li&gt;
              &lt;/ul&gt;
              &lt;ph conref="../../shared/shared.dita/see-user-guide" audience="no-user-guide"/&gt;
              &lt;/note&gt;
              &lt;/context&gt;
              &lt;steps&gt;
              &lt;step&gt;
              &lt;cmd audience="basic"&gt;
              &lt;menucascade&gt;
              &lt;uicontrol conref="shared.dita/logs"/&gt;
              &lt;/menucascade&gt;
              &lt;/cmd&gt;
              &lt;choices audience="advanced"&gt;
              &lt;choice&gt;
              &lt;ph conref="shared.dita/physical-appliance"/&gt;
              &lt;menucascade&gt;
              &lt;uicontrol conref="shared.dita/logs"/&gt;
              &lt;/menucascade&gt;
              &lt;/choice&gt;
              &lt;choice&gt;
              &lt;ph conref="shared.dita/virtual-appliance"/&gt;
              &lt;menucascade&gt;
              &lt;uicontrol conref="shared.dita/server"/&gt;
              &lt;uicontrol conref="shared.dita/logs"/&gt;
              &lt;/menucascade&gt;
              &lt;/choice&gt;
              &lt;/choices&gt;
              &lt;/step&gt;
              &lt;step&gt;
              &lt;cmd&gt;
              &lt;menucascade&gt;
              &lt;uicontrol conref="shared.dita/all"/&gt;
              &lt;uicontrol conref="shared.dita/editfile"/&gt;
              &lt;/menucascade&gt;
              &lt;/cmd&gt;
              &lt;info&gt;
              &lt;ul conref="shared.dita/drill-down"&gt;
              &lt;li/&gt;
              &lt;/ul&gt;
              &lt;note conref="shared.dita/randomnames"/&gt;
              &lt;/info&gt;
              &lt;/step&gt;
              &lt;/steps&gt;
              &lt;/taskbody&gt;
              &lt;/task&gt;
            </programlisting>
          </informalexample>
          <para>
            Seul le texte en noir doit être traduit. Traduire ce type de fichier
            de contenu <emphasis role="italic">DITA XML</emphasis> consiste donc
            à traduire uniquement le titre de la section et l'intégralité des
            <emphasis role="italic">conref</emphasis> sources. Lorsqu'il traduit
            un ensemble d'unités d'information placées en vrac dans un fichier,
            le traducteur manque cependant cruellement de contexte. Le créateur
            du contenu initial doit donc lui fournir une assistance
            constante. La méthode la plus efficace consiste à faire travailler
            le traducteur en régie. Avantage supplémentaire&nbsp;: il pourra
            ainsi interroger non seulement le rédacteur technique, mais
            également les concepteurs du produit.
          </para>
          <note>
            <para>
              Ne croyez pas qu'il s'agit là d'une contrainte spécifiquement
              induite par la modularisation poussée du contenu. Pour avoir fait
              une école de traduction reposant sur le principe simple mais
              efficace du <emphasis role="italic">triangle du sens</emphasis>
              (le traducteur doit comprendre le texte source pour le reformuler
              dans le texte cible et non transcrire une suite de mots d'une
              langue à l'autre) et avoir pratiqué la traduction technique durant
              plusieurs années, je sais que tout projet de traduction réussi
              repose sur une collaboration efficace entre concepteurs,
              rédacteurs et traducteurs.
            </para>
          </note>
          <para>
            Il est également possible de factoriser ainsi des éléments de
            structure, et non de contenu, tels que des en-têtes de tableaux.
            Vous pouvez ainsi présenter des informations de même type de manière
            homogène à moindre coût, c'est à dire sans recourir à la <ulink
            url="http://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture#Specialization">
            spécialisation</ulink>.
          </para>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="partager-des-blocs-information-atomiques-avec-les-conref"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
        <section id="proteger-les-informations-confidentielles">
          <title>Protéger les informations confidentielles</title>
          <para>
            Le puissant mécanisme <ulink
            url="http://docs.oasis-open.org/dita/v1.1/OS/archspec/conref.html">
            conref</ulink> de <emphasis role="italic">DITA XML</emphasis> se
            prête à d'autres applications que la réduction des coûts. Par
            exemple, le <emphasis role="bold">rédacteur technique</emphasis>
            peut masquer des informations dans le code source.
          </para>
          <para>
            Voici un cas original d'utilisation des <emphasis
            role="italic">conref</emphasis>&nbsp;: imaginez que vous devez faire
            traduire un fichier contenant des informations confidentielles qui
            ne doivent pas figurer dans la version traduite et auxquelles le
            traducteur ne doit pas avoir accès (une clause de confidentialité
            interdit aux clients de diffuser l'information dont ils disposent).
          </para>
          <para>
            Comment faire&nbsp;? Le filtrage à l'aide du mécanisme <emphasis
            role="italic">ditaval</emphasis> est conçu pour exclure des
            informations des livrables, non pour les masquer dans les fichiers
            sources.  Allez-vous devoir créer deux jeux de fichiers sources,
            certains comportant les informations confidentielles, les autres
            non&nbsp;?  Adieu alors le <emphasis
            role="italic">single-sourcing</emphasis> et la réutilisation du
            contenu qui vous ont fait choisir <emphasis role="italic">DITA
            XML</emphasis>&nbsp;!
          </para>
          <figure>
            <title>Masquer des informations confidentielles aux
            traducteurs</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="../graphics/confidentiel.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>
            En plaçant le contenu confidentiel dans un fichier que vous appelez
            par exemple confidentiel.dita et en plaçant des <emphasis
            role="italic">conref</emphasis> assortis d'une clé de filtrage dans
            le fichier à traduire, vous avez résolu votre problème&nbsp;: le
            traducteur ne traduira que le texte non confidentiel, et le livrable
            généré dans la langue cible ne contiendra pas le texte confidentiel,
            noté comme conditionnel et exclu explicitement par le fichier
            <emphasis role="italic">ditaval</emphasis> passé en argument lors de
            la compilation.
          </para>
          <itemizedlist>
            <title>Related links</title>
            <listitem>
              <para>
                <xref linkend="partager-des-blocs-information-atomiques-avec-les-conref"/>
              </para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
      <section
          id="fournir-une-information-ciblée-avec-le-texte-conditionnel-ditaval">
        <title>Fournir une information ciblée avec le texte conditionnel
        ditaval</title>
        <para>
          Un fichier <ulink
          url="http://docs.oasis-open.org/dita/v1.2/os/spec/common/about-ditaval.html">
          ditaval</ulink> reprend le principe des lunettes que vous chaussez
          pour visualiser un film en 3D&nbsp;: le verre gauche masque une moitié
          de l'image, le verre droit en masque l'autre moitié. Mais seul le
          <emphasis role="bold">rédacteur technique</emphasis> dispose de
          lunettes 3D et a une vision complète de l'information contenue dans le
          projet DITA XML.
        </para>
        <para>
          Les destinataires de l'information disposent de lunettes avec deux
          verres gauches ou deux verres droits. Ils ne voient donc qu'une partie
          de l'information. Loin d'être lésés par cet état de fait, ils ont
          ainsi un meilleur accès à l'information. Le profilage réalisé masque à
          chaque public les informations dont ils n'ont <emphasis
          role="italic">pas</emphasis> besoin et qui ne seraient pour eux que du
          bruit. Chaque audience bénéficie donc d'un meilleur accès à
          l'information qui la concerne, selon le fameux concept minimaliste de
          <emphasis role="italic">less is more</emphasis>.
        </para>
        <figure>
          <title>Texte conditionnel avec DITA XML</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="graphics/ditaval.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>
          Concrètement, le mécanisme <emphasis role="italic">ditaval</emphasis>
          est basé sur des opérateurs binaires&nbsp;: vous marquez un bloc
          d'information avec un attribut et une valeur, puis incluez ou excluez
          ce bloc dans le livrable en passant un opérande lors de la compilation
          (le bloc est inclus par défaut si aucun opérande n'est
          spécifié). C'est le principe du <emphasis role="italic">texte
          conditionnel</emphasis>.
        </para>
        <para>
          Gâce à ce mécanisme, il n'est pas nécessaire de créer deux fichiers
          différents lorsque leur contenu ne comporte que des variations
          mineures. C'est un outil de plus destiné à réduire la redondance du
          contenu source.
        </para>
        <para>
          Vous pouvez appliquer des clés de filtrage en série (condition
          <emphasis role="italic">et</emphasis>) en indiquant plusieurs valeurs
          séparées par des espaces dans les attributs <emphasis
          role="italic">product</emphasis>, <emphasis
          role="italic">audience</emphasis> ou autre.
        </para>
        <informalexample>
          <para>
            Pour indiquer qu'une remarque est destinée à la fois à des
            électriciens et à des utilisateurs avancés en voulant profiler
            l'information selon les publics suivants&nbsp;:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                non électriciens,
              </para>
            </listitem>
            <listitem>
              <para>
                électriciens débutants,
              </para>
            </listitem>
            <listitem>
              <para>
                électriciens experts.
              </para>
            </listitem>
          </itemizedlist>
        </informalexample>
        <para>
          Vous pouvez utiliser la structure suivante&nbsp;:
        </para>
        <programlisting>
          &lt;step audience="electricians advanced"&gt;
          &lt;cmd&gt; Ramenez l'intensité sous la dose létale de 150mA. &lt;/cmd&gt;
          &lt;/step&gt;
        </programlisting>
        <informalexample>
          <para>
            Le code suivant est correct avant filtrage&nbsp;:
          </para>
          <programlisting>
            &lt;thead&gt;
            &lt;row product="a&gt;
            &lt;entry&gt;Commande&lt;/entry&gt;
            &lt;entry&gt;Description&lt;/entry&gt;
            &lt;/row&gt;
            &lt;/thead&gt;
          </programlisting>
          <para>
            Après filtrage, en revanche, on obtient le code suivant&nbsp;:
          </para>
          <programlisting>
            &lt;thead&gt;
            &lt;/thead&gt;
          </programlisting>
          <para>
            Or, selon le schéma XSD, les en-têtes de tableaux doivent contenir
            au moins une ligne&nbsp;:
          </para>
          <programlisting>
            &lt;!ENTITY % thead.content "((%row;)+)&gt;
          </programlisting>
          <para>
            Ce code est donc incorrect et entraîne l'échec de la compilation.
          </para>
        </informalexample>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="cas-concret-documentation-de-nufirewall"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section id="didacticiels-dita-xml-et-xsl-fo">
      <title>Didacticiels DITA XML et XSL-FO</title>
      <para>
        Les didacticiels suivants aideront le <emphasis role="bold">rédacteur
        technique</emphasis> à mettre en place et à utiliser une chaîne de
        création et de publication <ulink url="http://dita.xml.org/">DITA
        XML</ulink> libre.
      </para>
      <para>
        DITA XML est un langage de rédaction structurée qui permet de créer des
        documents sans se soucier de leur aspect final sur différents
        supports. XSL-FO est un langage qui permet de réorganiser et filtrer le
        contenu XML et de lui appliquer une mise en page à l'aide d'une feuille
        de style.
      </para>
      <para>
        Un ensemble de fichiers DITA contient tout le contenu, relatif par
        exemple à un produit. Différentes feuilles de style XSL-FO permettront
        de publier ce contenu en PDF, en HTML ou sous un autre format en
        appliquant des transformations complexes. Le résumé de chaque section du
        document final pourra par exemple apparaître dans la version HTML et non
        dans la version PDF.
      </para>
      <para>
        De même, si un produit doit être fourni en marque blanche à différents
        clients, une mise en page totalement différente peu être appliquée à sa
        documentation en spécifiant simplement un autre jeu de feuilles de style
        lors de la génération du livrable. Opération qui n'est pas envisageable
        en pratique avec des solutions traditionnelles de type FrameMaker.
      </para>
      <itemizedlist>
        <title>Related links</title>
        <listitem>
          <para>
            <xref linkend="format-structure-dita-xml"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="xsl-fo-filtrer-du-contenu-selon-des-conditions-sauf-et-ou"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="xsl-fo-inserer-automatiquement-un-titre-pour-les-exemples"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="generer-un-pdf-avec-dita-open-toolkit-sous-gnu-linux"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="generer-un-pdf-avec-dita-open-toolkit-windows"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="gerer-les-projets-de-documentation-multilingues-dita-xml"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="creer-des-documents-differents-a-partir-des-memes-sources-dita-xml-texte-conditionnel"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="dita-open-toolkit-afficher-les-références-croisées-dans-les-pdf"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="afficher-un-index-dans-un-pdf-pas-sous-dita-open-toolkit"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="utiliser-lide-nxml-pour-dita-xml"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="accelerer-sa-saisie-avec-le-mode-predictive-pour-emacs"/>
          </para>
        </listitem>
      </itemizedlist>
      <section id="xsl-fo-filtrer-du-contenu-selon-des-conditions-sauf-et-ou">
        <title>XSL-FO&nbsp;: filtrer du contenu selon des conditions « sauf » et
        « ou »</title>
        <para>
          Imaginons que vous vouliez filtrer les nœuds enfants de la balise DITA
          XML &lt;example&gt; et afficher tout son contenu à l'exception du
          titre (situé entre les balises &lt;title&gt;).
        </para>
        <para>
          Vous pouvez recourir alors à la syntaxe suivante&nbsp;:
        </para>
        <programlisting>
          &lt;xsl:template match="*[contains(@class,' topic/example ')]"&gt;
          &lt;fo:block&gt;
          &lt;xsl:apply-templates select="*[not(name()='title')]" /&gt;
          &lt;/fo:block&gt;
          &lt;/xsl:template&gt;
        </programlisting>
        <para>
          Cette commande sélectionne tous les nœuds enfants du nœud
          &lt;example&gt;, à l'exception du nœud &lt;title&gt;. Cependant, le
          nœud &lt;example&gt; accepte le texte entré directement, sans être
          encapsulé dans des balises. Cette commande ne fera alors pas
          apparaître ce contenu.
        </para>
        <para>
          Supposons que le code source d'un de vos fichiers DITA soit le
          suivant&nbsp;:
        </para>
        <programlisting>
          &lt;example&gt;
          &lt;title&gt;
          XSL-FO
          &lt;/title&gt;
          Voici mon exemple de chemin XPATH&nbsp;:
          &lt;codeblock&gt;
          ancestor-or-self
          &lt;/codeblock&gt;
          Texte non encapsulé situé après un nœud enfant.
          &lt;/example&gt;
        </programlisting>
        <para>
          Le fichier PDF affichera l'exemple structuré comme suit&nbsp;:
        </para>
        <programlisting>
          ancestor-or-self
        </programlisting>
        <para>
          Le titre de l'exemple n'est pas affiché, ce qui correspond au résultat
          souhaité, mais le contenu non encapsulé dans des balises n'apparaît
          pas, ce qui est un effet de bord indésirable. Pour sélectionner ce
          contenu, il faut sélectionner les nœuds textuels avec la syntaxe
          text(). Il est alors tentant d'utiliser la syntaxe suivante&nbsp;:
        </para>
        <programlisting>
          &lt;xsl:template match="*[contains(@class,' topic/example ')]"&gt;
          &lt;fo:block&gt;
          &lt;xsl:apply-templates select="text()" /&gt;
          &lt;xsl:apply-templates select="*[not(name()='title')]" /&gt;
          &lt;/fo:block&gt;
          &lt;/xsl:template&gt;
        </programlisting>
        <para>
          Cependant, tous les éléments texte non encapsulés dans des balises
          enfant de la balise &lt;example&gt; seront placés en tête de
          l'exemple, avant les éléments encapsulés, même s'ils sont placés après
          dans le fichier source DITA.
        </para>
        <para>
          Le fichier PDF affichera l'exemple structuré comme suit&nbsp;:
        </para>
        <para>
          Voici mon exemple de chemin XPATH&nbsp;:Texte non encapsulé situé
          après un nœud enfant.
        </para>
        <programlisting>
          ancestor-or-self
        </programlisting>
        <para>
          Il faut alors utiliser la syntaxe <emphasis
          role="italic">pipe</emphasis> (condition booléenne <emphasis
          role="italic">ou</emphasis>) pour modifier le chemin <ulink
          url="http://fr.wikipedia.org/wiki/XPath">XPATH</ulink> comme
          suit&nbsp;:
        </para>
        <programlisting>
          &lt;xsl:apply-templates select="text()|*[not(name()='title')]" /&gt;
        </programlisting>
        <para>
          Le résultat final sera&nbsp;:
        </para>
        <programlisting>
          &lt;xsl:template match="*[contains(@class,' topic/example ')]"&gt;
          &lt;fo:block&gt;
          &lt;xsl:apply-templates select="text()|*[not(name()='title')]" /&gt;
          &lt;/fo:block&gt;
          &lt;/xsl:template&gt;
        </programlisting>
        <para>
          Le fichier PDF affichera l'exemple structuré comme suit&nbsp;:
        </para>
        <para>
          Voici mon exemple de chemin XPATH&nbsp;:
        </para>
        <programlisting>
          ancestor-or-self
        </programlisting>
        <para>
          Texte non encapsulé situé après un nœud enfant.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="didacticiels-dita-xml-et-xsl-fo"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="xsl-fo-inserer-automatiquement-un-titre-pour-les-exemples">
        <title>XSL-FO&nbsp;: insérer automatiquement un titre pour les
        exemples</title>
        <para>
          Par défaut, <emphasis role="italic">DITA Open Toolkit</emphasis>
          n'insère pas automatiquement dans les fichiers PDF le texte <emphasis
          role="italic">Exemple&nbsp;:</emphasis> devant le titre d'un exemple
          contenu entre balises DITA XML &lt;example&gt;. La syntaxe <ulink
          url="http://fr.wikipedia.org/wiki/XSL-FO" >XSL-FO</ulink> offre
          cependant cette possibilité.
        </para>
        <para>
          Supposons que le code source d'un de vos fichiers DITA soit le
          suivant&nbsp;:
        </para>
        <programlisting>
          &lt;example&gt;
          &lt;title&gt;
          XSL-FO
          &lt;/title&gt;
          Voici mon exemple de chemin XPATH&nbsp;:
          &lt;codeblock&gt;
          ancestor-or-self
          &lt;/codeblock&gt;
          &lt;/example&gt;
        </programlisting>
        <para>
          Vous souhaitez que le fichier PDF généré affiche l'exemple structuré
          comme suit&nbsp;:
        </para>
        <para>
          <emphasis role="italic">Exemple&nbsp;: XSL-FO</emphasis>
        </para>
        <para>
          Voici mon exemple de chemin XPATH&nbsp;:
        </para>
        <programlisting>
          ancestor-or-self
        </programlisting>
        <para>
          et que si l'exemple ne contient pas de titre, il soit structuré comme
          suit&nbsp;:
        </para>
        <para>
          <emphasis role="italic">Exemple&nbsp;:</emphasis>
        </para>
        <para>
          Voici mon exemple de chemin XPATH&nbsp;:
        </para>
        <para>
          ancestor-or-self
        </para>
        <para>
          Par défaut, cependant, ce contenu sera structuré comme suit dans le
          PDF par DITA Open Toolkit&nbsp;:
        </para>
        <para>
          <emphasis role="italic">XSL-FO</emphasis>
        </para>
        <para>
          Voici mon exemple de chemin XPATH&nbsp;:
        </para>
        <programlisting>
          ancestor-or-self
        </programlisting>
        <para>
          Il est toujours possible d'entrer le texte entre les balises
          &lt;example&gt;, mais XSL-FO offre une manière de procéder plus
          élégante et structurée.
        </para>
        <orderedlist>
          <listitem>
            <para>
              <phrase>
                Remplacez dans la feuille de style
                <filename>plugins/org.dita.pdf2/xsl/fo/commons.xsl</filename>
                (sous DITA Open Toolkit 1.7.)  le template suivant&nbsp;:
              </phrase>
            </para>
            <programlisting>
              &lt;xsl:template match="*[contains(@class,' topic/example ')]/*[contains(@class,' topic/title ')]&gt;
              &lt;fo:block xsl:use-attribute-sets="example.title&gt;
              &lt;xsl:call-template name="commonattributes"/&gt;
              &lt;xsl:apply-templates/&gt;
              &lt;/fo:block&gt;
              &lt;/xsl:template&gt;
            </programlisting>
            <para>
              par le code suivant&nbsp;:
            </para>
            <programlisting>
              &lt;xsl:template match="*[contains(@class,' topic/example ')]&gt;
              &lt;fo:block xsl:use-attribute-sets="example.title&gt;
              &lt;xsl:call-template name="insertVariable&gt;
              &lt;xsl:with-param name="theVariableID" select="'my-example-text'"/&gt;
              &lt;/xsl:call-template&gt;
              &lt;xsl:apply-templates select="title"/&gt;
              &lt;/fo:block&gt;
              &lt;fo:block&gt;
              &lt;xsl:apply-templates select="*[not(contains(@class, ' topic/title '))]|text()|processing-instruction()"/&gt;
              &lt;/fo:block&gt;
              &lt;/xsl:template&gt;
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Définissez dans les fichiers contenant les variables de langue,
                tels que
                <filename>plugins/org.dita.pdf2/cfg/common/vars/fr.xml</filename>,
                les variables de texte à insérer automatiquement, par
                exemple&nbsp;:
              </phrase>
            </para>
            <programlisting>
              &lt;variable id="my-example-text&gt;Exemple&nbsp;:&lt;/variable&gt;
            </programlisting>
          </listitem>
        </orderedlist>
        <para>
          Pour obtenir un comportement homogène, vous devez désactiver ce
          traitement pour les exemples des types de <emphasis
          role="italic">topics</emphasis> spécifiques (<emphasis
          role="italic">task</emphasis>, notamment).
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="didacticiels-dita-xml-et-xsl-fo"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="generer-un-pdf-avec-dita-open-toolkit-sous-gnu-linux">
        <title>Générer un PDF avec DITA Open Toolkit sous GNU/Linux</title>
        <para>
          <emphasis role="italic">Prérequis</emphasis>
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Ubuntu ou Debian sur une machine physique ou virtuelle avec le mot
              de passe administrateur,
            </para>
          </listitem>
          <listitem>
            <para>
              connexion Internet.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Ce didacticiel <ulink url="http://dita.xml.org/">DITA XML</ulink> est
          destiné à vous guider dans la mise en place et l'utilisation de la
          chaîne de publication <emphasis role="italic">DITA Open
          Toolkit</emphasis> dans un environnement GNU/Linux (Ubuntu ou Debian).
        </para>
        <orderedlist>
          <listitem>
            <para>
              <phrase>
                Téléchargez et décompressez l'archive DITA Open Toolkit&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $  wget http://sourceforge.net/projects/dita-ot/files/DITA-OT%20Stable%20Release/DITA%20Open%20Toolkit%201.8/DITA-OT1.8.5_full_easy_install_bin.tar.gz
              $  tar -xzvf DITA-OT1.8.5_full_easy_install_bin.tar.gz
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Configurez l'environnement DITA Open Toolkit&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $  cd DITA-OT1.8.5/
              $  ./startcmd.sh
              $  ant -f integrator.xml
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Générez votre premier PDF&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $ java -jar lib/dost.jar /i:docsrc/userguide.ditamap /transtype:pdf
            </programlisting>
          </listitem>
        </orderedlist>
        <para>
          Félicitations, vous avez compilé votre premier projet DITA XML&nbsp;!
          Le fichier PDF généré est <filename>out/userguide.pdf</filename>. Vous
          pouvez maintenant compiler d'autres projets en ignorant les étapes 1
          et 2.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="didacticiels-dita-xml-et-xsl-fo"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="generer-un-pdf-avec-dita-open-toolkit-windows">
        <title>Générer un PDF avec DITA Open Toolkit (Windows)</title>
        <para>
          <emphasis role="italic">Prérequis</emphasis>
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Connexion Internet
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Ce didacticiel <ulink url="http://dita.xml.org/">DITA XML</ulink> est
          destiné à vous guider dans la mise en place et l'utilisation de la
          chaîne de publication <emphasis role="italic">DITA Open
          Toolkit</emphasis> dans un environnement Windows (testé sur Windows
          XP).
        </para>
        <orderedlist>
          <listitem>
            <para>
              <phrase>
                Téléchargez <ulink
                url="http://java.com/fr/download/manual.jsp?locale=fr">
                Java</ulink>, puis lancez le programme d'installation.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Téléchargez <ulink
                url="http://sourceforge.net/projects/dita-ot/files/DITA-OT%20Stable%20Release/DITA%20Open%20Toolkit%201.5.4/DITA-OT1.5.4_full_easy_install_bin.zip/download">
                DITA Open Toolkit 1.5.4</ulink> sur le bureau, puis décompressez
                DITA-OT1.5.4_full_easy_install_bin.zip.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Sélectionnez <guilabel>Exécuter</guilabel> dans le menu
                <guilabel>Démarrer</guilabel>, collez la commande suivante, puis
                appuyez sur <emphasis role="italic">Entrée</emphasis>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              cmd
            </programlisting>
            <para>
              Un terminal apparaît.
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Collez la commande suivante dans le terminal&nbsp;:
              </phrase>
            </para>
            <programlisting>
              cd Bureau\DITA-OT1.5.4_full_easy_install_bin\DITA-OT1.5.4
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Collez la commande suivante&nbsp;:
              </phrase>
            </para>
            <programlisting>
              startcmd.bat
            </programlisting>
            <para>
              Un nouveau terminal apparaît.
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Collez la commande suivante dans le nouveau terminal&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $ java -jar lib/dost.jar /i:samples/taskbook.ditamap /outdir:. /transtype:pdf2
            </programlisting>
            <para>
              Cette commande génère un fichier PDF à partir d'un projet DITA XML
              d'exemple.
            </para>
          </listitem>
        </orderedlist>
        <para>
          Félicitations, vous avez compilé votre premier projet DITA XML&nbsp;!
          Vous trouverez le fichier cible <filename>taskbook.pdf</filename> dans
          le répertoire
          <filename>Bureau\DITA-OT1.5.4_full_easy_install_bin\DITA-OT1.5.4</filename>. Vous
          pouvez maintenant compiler d'autres projets en ignorant les étapes 1
          et 2.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="didacticiels-dita-xml-et-xsl-fo"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="gerer-les-projets-de-documentation-multilingues-dita-xml">
        <title>Gérer les projets de documentation multilingues DITA XML</title>
        <para>
          <ulink url="http://dita.xml.org/">DITA XML</ulink> est un formidable
          format pour gérer les projets de documentation. Pour les projets
          multilingues, cependant, le <emphasis role="bold">rédacteur
          technique</emphasis> doit créer un fichier <emphasis
          role="italic">ditamap</emphasis>, qui contient la structure de table
          des matières des documents, par version. Ceci entraîne un risque
          d'erreurs et d'incohérences. Heureusement, une méthodologie appropriée
          et un script d'automatisation destiné à la chaîne de publication
          <emphasis role="italic">DITA Open Toolkit</emphasis> remédient à ce
          problème.
        </para>
        <orderedlist>
          <listitem>
            <para>
              <phrase>
                Le fichier <emphasis role="italic">ditamap</emphasis> ne doit
                pas comporter de section <emphasis
                role="italic">navtitle</emphasis>, qui contient un titre en
                toutes lettres, au lieu d'extraire le titre de la section DITA
                correspondante, et est donc propre à chaque langue.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Dès le début de votre projet DITA, placez les fichiers de
                contenu <emphasis role="italic">DITA</emphasis> dans un
                sous-répertoire spécifique à la langue dans laquelle il est
                initialement rédigé.
              </phrase>
            </para>
            <para>
              Par exemple&nbsp;:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  product
                </para>
                <itemizedlist>
                  <listitem>
                    <para>
                      en_US
                    </para>
                    <itemizedlist>
                      <listitem>
                        <para>
                          images
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          tasks
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          topics
                        </para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </itemizedlist>
                <para>
                  et non&nbsp;:
                </para>
              </listitem>
              <listitem>
                <para>
                  product
                </para>
                <itemizedlist>
                  <listitem>
                    <para>
                      images               
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      tasks               
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      topics               
                    </para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Remplacez dans le fichier <emphasis
                role="italic">ditamap</emphasis> toutes les occurrences du nom
                du répertoire propre à la langue par une chaîne unique
                provisoire.
              </phrase>
            </para>
            <para>
              Par exemple, utilisez la chaîne <emphasis
              role="italic">@language-code@</emphasis>&nbsp;:
            </para>
            <programlisting>
              &lt;topicref href="@language-code@/topics/managing-rights.dita"/&gt;
            </programlisting>
            <para>
              et non&nbsp;:
            </para>
            <programlisting>
              &lt;topicref href="en_US/topics/managing-rights.dita"/&gt;
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Pour générer les fichiers cibles, vous pouvez maintenant&nbsp;:
              </phrase>
            </para>
            <orderedlist>
              <listitem>
                <para>
                  <phrase>
                    modifier dans le fichier
                    <filename>demo/fo/build.xml</filename> le paramètre
                    default.locale,
                  </phrase>
                </para>
              </listitem>
              <listitem>
                <para>
                  <phrase>
                    remplacer dans le fichier <emphasis
                    role="italic">DITAMAP</emphasis> la variable de langue par
                    le nom du répertoire de langue,
                  </phrase>
                </para>
              </listitem>
              <listitem>
                <para>
                  <phrase>
                    modifier le paramètre de langue xml:lang dans le fichier
                    <emphasis role="italic">DITAMAP</emphasis> et dans les
                    fichiers de contenu DITA,
                  </phrase>
                </para>
              </listitem>
              <listitem>
                <para>
                  <phrase>
                    pour les fichiers cibles PDF, modifier les dimensions de
                    page (A4 ou US letter, par exemple) selon la langue,
                  </phrase>
                </para>
              </listitem>
              <listitem>
                <para>
                  <phrase>
                    générer les fichiers cibles,
                  </phrase>
                </para>
              </listitem>
              <listitem>
                <para>
                  <phrase>
                    rétablir les valeurs initiales dans les fichiers sources.
                  </phrase>
                </para>
              </listitem>
            </orderedlist>
          </listitem>
        </orderedlist>
        <para>
          Heureusement, un script Bash (GNU/Linux) simple permet d'automatiser
          cela.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="didacticiels-dita-xml-et-xsl-fo"/>
            </para>
          </listitem>
        </itemizedlist>
        <section id="automatiser-la-generation-des-fichiers-cibles">
          <title>Automatiser la génération des fichiers cibles</title>
          <itemizedlist>
            <listitem>
              <para>
                Vous avez installé DITA Open Toolkit.
              </para>
            </listitem>
            <listitem>
              <para>
                Votre projet DITA XML ne comporte qu'un fichier <emphasis
                role="italic">DITAMAP</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                Vos fichiers de contenu DITA ont l'extension .dita.
              </para>
            </listitem>
            <listitem>
              <para>
                Les noms des répertoires des versions linguistiques
                correspondent aux codes de langues supportés par Dita Open
                Toolkit (fr_FR ou en_US, par exemple).
              </para>
            </listitem>
            <listitem>
              <para>
                Vos fichiers de contenu DITA se trouvent dans des
                sous-répertoires des répertoires des versions linguistiques (par
                exemple, dans <filename>fr_FR/tasks/</filename> et
                <filename>fr_FR/topics/</filename>).
              </para>
            </listitem>
          </itemizedlist>
          <para>
            Les valeurs supportées pour la dimension des pages PDF sont fr_FR
            (A4) et en_US (US letter). Ce script peut être bien entendu
            facilement adapté, ou inspirer un nouveau script.
          </para>
          <orderedlist>
            <listitem>
              <para>
                <phrase>
                  Téléchargez le <ulink
                  url="http://www.redaction-technique.org/media/dita2target.sh">
                  script de génération multilingue DITA XML</ulink> dans le
                  répertoire contenant le fichier <emphasis
                  role="italic">DITAMAP</emphasis> du projet.
                </phrase>
              </para>
            </listitem>
            <listitem>
              <para>
                <phrase>
                  Dans un terminal, placez-vous dans ce répertoire, puis
                  entrez&nbsp;:
                </phrase>
              </para>
              <programlisting>
                $ chmod +x dita2target.sh
              </programlisting>
            </listitem>
            <listitem>
              <para>
                <phrase>
                  Dans le terminal, entrez&nbsp;:
                </phrase>
              </para>
              <programlisting>
                $ mkdir out
              </programlisting>
              <para>
                pour créer le répertoire qui contiendra les fichiers cibles.
              </para>
            </listitem>
            <listitem>
              <para>
                <phrase>
                  Entrez&nbsp;:
                </phrase>
              </para>
              <programlisting>
                $ ./dita2target.sh &lt;fichier ditamap&gt;  \
                &lt;nom du répertoire de langue&gt; &lt;format cible&gt;
              </programlisting>
              <para>
                pour générer les fichiers cibles.
              </para>
              <para>
                L'argument <emphasis role="italic">format cible</emphasis>
                accepte les valeurs gérées par DITA Open Toolkit.
              </para>
              <programlisting>
                ./dita2target.sh firewall.ditamap  en_US pdf2
              </programlisting>
              <para>
                Le fichier PDF <filename>firewall.pdf</filename> est alors
                généré dans le répertoire <filename>out</filename> (spécifié
                <emphasis role="italic">en dur</emphasis> dans le script).
              </para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section
          id="creer-des-documents-differents-a-partir-des-memes-sources-dita-xml-texte-conditionnel">
        <title>Créer des documents différents à partir des mêmes sources DITA
        XML (texte conditionnel)</title>
        <itemizedlist>
          <listitem>
            <para>
              Vous avez installé DITA Open Toolkit dans le répertoire
              <filename>DITA-OT1.5.4</filename> sous GNU/Linux ou Windows.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          DITA XML offre un mécanisme de <emphasis role="italic">texte
          conditionnel</emphasis>. Ce mécanisme favorise la réutilisation du
          contenu source et évite la redondance des informations. Ce didacticiel
          aidera le <emphasis role="bold">rédacteur technique</emphasis> à
          utiliser ce mécanisme en quelques minutes.
        </para>
        <orderedlist>
          <listitem>
            <para>
              <phrase>
                Collez le code suivant dans un fichier et enregistrez ce dernier
                sous le nom de <filename>texte-conditionnel.dita</filename> dans
                le répertoire <filename>DITA-OT1.5.4</filename>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              &lt;?xml version="1.0" encoding="utf-8"?&gt;
              &lt;!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA 1.2 Topic//EN" "/usr/share/dita-ot/dtd/technicalContent/dtd/topic.dtd"&gt;
              &lt;topic id="exemple-topic" xml:lang="fr-fr"&gt;
              &lt;title&gt;Utilisation du texte conditionnel&lt;/title&gt;
              &lt;body&gt;
              &lt;hazardstatement&gt;
              &lt;messagepanel audience="electriciens"&gt;
              &lt;typeofhazard&gt;
              Danger pour les électriciens
              &lt;/typeofhazard&gt;
              &lt;consequence&gt;
              Risque d'électrocution
              &lt;/consequence&gt;
              &lt;howtoavoid&gt;
              Ne touchez pas les fils électriques.
              &lt;/howtoavoid&gt;
              &lt;/messagepanel&gt;
              &lt;messagepanel audience="plombiers"&gt;
              &lt;typeofhazard&gt;
              Danger pour les plombiers
              &lt;/typeofhazard&gt;
              &lt;consequence&gt;
              Risque de noyade
              &lt;/consequence&gt;
              &lt;howtoavoid&gt;
              Ne plongez pas dans la piscine.
              &lt;/howtoavoid&gt;
              &lt;/messagepanel&gt;
              &lt;/hazardstatement&gt;
              &lt;p&gt;
              Tout contenu placé entre balises ne comportant pas de valeur
              &lt;i&gt;audience&lt;/i&gt; exclue dans un fichier &lt;i&gt;.ditaval&lt;/i&gt; est publié dans les
              documents destinés aux plombiers et aux électriciens.
              &lt;/p&gt;
              &lt;/body&gt;
              &lt;/topic&gt;
            </programlisting>
            <para>
              Ce code contient des balises DITA contenant des valeurs <emphasis
              role="italic">audience</emphasis> différentes&nbsp;: nous allons
              exclure le contenu d'une de ces deux balises lors de la génération
              du fichier cible en utilisant la clé <emphasis
              role="italic">audience</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Collez le code suivant dans un fichier et enregistrez ce dernier
                sous le nom de <filename>texte-conditionnel.ditamap</filename>
                dans le répertoire <filename>DITA-OT1.5.4</filename>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              &lt;?xml version="1.0" encoding="utf-8"?&gt;
              &lt;!DOCTYPE bookmap PUBLIC "-//OASIS//DTD DITA BookMap//EN" "/usr/share/dita-ot/dtd/bookmap/dtd/bookmap.dtd"&gt;
              &lt;bookmap id="texte-conditionnel"&gt;
              &lt;booktitle&gt;
              &lt;mainbooktitle&gt;
              Exemple de texte conditionnel
              &lt;/mainbooktitle&gt;
              &lt;/booktitle&gt;
              &lt;chapter href="texte-conditionnel.dita"/&gt;
              &lt;/bookmap&gt;
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Collez le code suivant dans un fichier et enregistrez ce dernier
                sous le nom de <filename>electriciens.ditaval</filename> dans le
                répertoire <filename>DITA-OT1.5.4</filename>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              &lt;?xml version="1.0" encoding="UTF-8"?&gt;
              &lt;val&gt;
              &lt;prop att="audience" val="electriciens" action="include"/&gt;
              &lt;prop att="audience" val="plombiers" action="exclude"/&gt;
              &lt;/val&gt;
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Collez le code suivant dans un fichier et enregistrez ce dernier
                sous le nom de <filename>plombiers.ditaval</filename> dans le
                répertoire <filename>DITA-OT1.5.4</filename>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              &lt;?xml version="1.0" encoding="UTF-8"?&gt;
              &lt;val&gt;
              &lt;prop att="audience" val="electriciens" action="exclude"/&gt;
              &lt;prop att="audience" val="plombiers" action="include"/&gt;
              &lt;/val&gt;
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Ouvrez un terminal et entrez la commande suivante dans le
                répertoire <filename>DITA-OT1.5.4</filename>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $ java -jar lib/dost.jar /i:texte-conditionnel.ditamap \
              /filter:electriciens.ditaval /outdir:. /transtype:pdf2
            </programlisting>
            <para>
              Ouvrez le fichier
              <filename>texte-conditionnel.pdf</filename>&nbsp;; il contient des
              informations destinées&nbsp;:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  aux plombiers et aux électriciens,
                </para>
              </listitem>
              <listitem>
                <para>
                  uniquement aux électriciens.
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Ouvrez un terminal et entrez la commande suivante dans le
                répertoire <filename>DITA-OT1.5.4</filename>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $ java -jar lib/dost.jar /i:texte-conditionnel.ditamap \
              /filter:plombiers.ditaval /outdir:. /transtype:pdf2
            </programlisting>
            <para>
              Ouvrez le fichier
              <filename>texte-conditionnel.pdf</filename>&nbsp;; il contient des
              informations destinées&nbsp;:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  aux plombiers et aux électriciens,
                </para>
              </listitem>
              <listitem>
                <para>
                  uniquement aux plombiers.
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
        </orderedlist>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="didacticiels-dita-xml-et-xsl-fo"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section
          id="dita-open-toolkit-afficher-les-références-croisées-dans-les-pdf">
        <title>DITA Open Toolkit&nbsp;: afficher les références croisées dans
        les PDF</title>
        <para>
          Les références croisées sont un élément important d'une documentation
          technique bien structurée. Elles permettent à l'utilisateur de
          naviguer facilement dans les briques d'information et sont un élément
          crucial de l'utilisabilité du document final.  <emphasis
          role="italic">DITA Open Toolkit</emphasis> les gère très bien, à
          condition d'effectuer quelques réglages.
        </para>
        <para>
          Vous avez placé des balises <emphasis
          role="italic">related-links</emphasis> correctement formatées dans vos
          fichiers de contenu DITA, ou mieux, une <ulink
          url="http://docs.oasis-open.org/dita/v1.0/langspec/reltable.html">
          reltable</ulink> dans votre structure de table des matières <emphasis
          role="italic">DITAMAP</emphasis> (la <emphasis
          role="italic">reltable</emphasis> permet de décontextualiser votre
          contenu et donc de mieux le réutiliser). Vous lancez votre commande de
          génération du PDF et, mauvaise surprise, aucune section <emphasis
          role="italic">Voir aussi</emphasis>
          <footnote>
            <para>
              Pour des raisons de « décontextualisation », et pour se donner la
              possibilité de réutiliser le contenu ailleurs, les références
              croisées ne sont pas placées dans le corps du texte, mais en fin
              de section, dans une rubrique dédiée.
            </para>
            </footnote> n'apparaît dans le fichier cible&nbsp;! Vous essayez
            alors de générer une version HTML de votre contenu et là, votre
            section <emphasis role="italic">Voir aussi</emphasis> est bien
            présente.  <emphasis role="italic">DITA Open Toolkit</emphasis> ne
            supporterait-il pas les références croisées dans les PDF&nbsp;?
        </para>
        <para>
          Fort heureusement, non. Par défaut (allez savoir pourquoi), les
          références croisées ne sont pas générées dans les PDF par <emphasis
          role="italic">DITA Open Toolkit</emphasis>. Pour les afficher,
          attribuez la valeur <emphasis role="italic">no</emphasis> à la
          variable <emphasis role="italic">disableRelatedLinks</emphasis> du
          fichier <filename>demo/fo/build_template.xml</filename>. Si vous
          utilisez <emphasis role="italic">ant</emphasis>, il vous faudra
          également passer le paramètre <emphasis
          role="italic">args.fo.include.rellinks=all</emphasis> comme
          suit&nbsp;:
        </para>
        <programlisting>
          $ ant -Dargs.input=samples/sequence.ditamap -Doutput.dir=out/ \
          -Dtranstype=pdf2 -Dargs.fo.include.rellinks=all
        </programlisting>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="didacticiels-dita-xml-et-xsl-fo"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="afficher-un-index-dans-un-pdf-pas-sous-dita-open-toolkit">
        <title>Afficher un index dans un PDF (mais pas sous DITA Open
        Toolkit)</title>
        <para>
          Tout n'est pas parfait sous <ulink
          url="http://dita-ot.sourceforge.net/1.6/">DITA Open Toolkit</ulink>,
          le moteur de publication libre DITA XML. Vous avez méticuleusement
          inséré vos entrées d'index dans vos fichiers de contenu DITA XML. Vous
          générez une sortie PDF et l'index n'apparaît pas. Un message d'erreur
          de la compilation vous indique que, hélas, FOP ne supporte
          actuellement pas la génération des index.
        </para>
        <para>
          Face à cette situation, vous avez quatre solutions&nbsp;:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              attendre que FOP supporte les index&nbsp;; sans date de
              disponibilité, ce choix sera difficile à faire accepter par votre
              direction&nbsp;;
            </para>
          </listitem>
          <listitem>
            <para>
              abandonner DITA XML&nbsp;; avouez que ce serait dommage de
              renoncer aux formidables gains de productivité que permet ce
              format&nbsp;;
            </para>
          </listitem>
          <listitem>
            <para>
              renoncer à afficher l'index dans le PDF&nbsp;; les arguments en
              faveur d'un tel choix ont un certain poids&nbsp;: les index sont
              difficiles à maintenir et offre un surplus d'utilisabilité
              discutable dans un document qui ne sera consulté que marginalement
              sous forme imprimée&nbsp;;
            </para>
          </listitem>
          <listitem>
            <para>
              abandonner DITA Open Toolkit et se tourner vers une solution
              propriétaire&nbsp;; les logiciels non open-source, XMetal, par
              exemple, on souvent recours au moteur de publication XEP de
              RenderX qui lui, supporte parfaitement les index.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Le problème de l'index n'est donc pas un obstacle à l'adoption de DITA
          XML. Si votre support final est un document imprimé, les solutions
          existent. S'il s'agit d'un format électronique, l'absence d'un index
          est largement compensée par la fonction de recherche en plein texte.
        </para>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="didacticiels-dita-xml-et-xsl-fo"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="utiliser-lide-nxml-pour-dita-xml">
        <title>Utiliser l'IDE nXML pour DITA XML</title>
        <itemizedlist>
          <listitem>
            <para>
              Emacs
            </para>
          </listitem>
          <listitem>
            <para>
              La structure de répertoires de votre projet de documentation DITA
              XML doit être la suivante&nbsp;:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  répertoire de langue
                </para>
                <itemizedlist>
                  <listitem>
                    <para>
                      concepts
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      faq
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      reference
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      tasks
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      topics
                    </para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
            <para>
              où <emphasis role="italic">&lt;répertoire de langue&gt;</emphasis>
              a la valeur <emphasis role="italic">en_US</emphasis>, ou <emphasis
              role="italic">fr_FR</emphasis>, etc.
            </para>
          </listitem>
          <listitem>
            <para>
              Les instructions de ligne de commande sont conçues pour
              GNU/Linux&nbsp;; elles doivent être adaptées pour être utilisées
              dans un autre environnement.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Le mode <emphasis role="italic">nXML</emphasis> propose de valider en
          temps réel les documents XML DocBook, XHTML ou autres. Plus la peine
          de connaître le schéma XML par cœur&nbsp;: votre éditeur de texte vous
          propose l'autocomplétion des balises XML selon le contexte. Il ne
          supporte cependant pas DITA XML par défaut. Ce didacticiel vous
          permettra d'utiliser ce mode Emacs pour DITA XML.
        </para>
        <orderedlist>
          <listitem>
            <para>
              <phrase>
                Effectuez une sauvegarde de l'ensemble de votre projet de
                documentation DITA XML.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Ouvrez un terminal et collez la suite de commandes
                suivante&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $ cd &amp;&amp; \
              wget http://www.thaiopensource.com/download/nxml-mode-20041004.tar.gz &amp;&amp; \
              tar xzvf nxml-mode-20041004.tar.gz &amp;&amp; \
              wget http://www.redaction-technique.org/media/nxml-mode-environmment.txt &amp;&amp; \
              cp .emacs .emacs.bak &amp;&amp; \
              cat .emacs | sed '$a\' &gt; .emacs.tmp &amp;&amp; \
              mv .emacs.tmp .emacs &amp;&amp; \
              cat nxml-mode-environmment.txt &gt;&gt; .emacs &amp;&amp; \
              rm  nxml-mode-environmment.txt
            </programlisting>
            <note>
              <para>
                Si un message vous avertit que le fichier
                <filename>.emacs</filename> n'existe pas, collez les commandes
                suivantes, puis recommencez l'opération&nbsp;:
              </para>
              <programlisting>
                $ cd &amp;&amp; touch .emacs
              </programlisting>
            </note>
            <para>
              Cette suite de commandes&nbsp;:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  télécharge et décompresse le mode nXML,
                </para>
              </listitem>
              <listitem>
                <para>
                  crée une copie de sauvegarde du fichier
                  <filename>.emacs</filename> (<filename>.emacs.bak</filename>),
                </para>
              </listitem>
              <listitem>
                <para>
                  écrit les variables d'environnement du mode nXML dans le
                  fichier <filename>.emacs</filename>.
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Téléchargez <ulink
                url="http://www.redaction-technique.org/media/rnc.tar.gz">l'archive
                des schémas RelaxNG pour DITA XML</ulink> dans le répertoire
                racine de votre projet de documentation DITA XML.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Placez-vous dans le répertoire racine de votre projet de
                documentation DITA XML, puis collez la commande suivante&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $ tar xzvf rnc.tar.gz
            </programlisting>
            <para>
              Cette commande crée un répertoire rnc de même niveau que le
              <emphasis role="italic">&lt;répertoire de langue&gt;</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Téléchargez <ulink
                url="http://www.redaction-technique.org/media/schemas.redaction-technique.org.tar.gz">
                l'archive des fichiers <filename>schemas.xml</filename> </ulink>
                dans le répertoire racine de votre projet de documentation DITA
                XML, puis collez la suite de commandes ci-dessous en remplaçant
                <emphasis role="italic">&lt;répertoire de langue&gt;</emphasis>
                par la valeur appropriée, <emphasis
                role="italic">en_US</emphasis>, ou <emphasis
                role="italic">fr_FR</emphasis>, par exemple. Répétez cette étape
                pour tous vos répertoires de langue.
              </phrase>
            </para>
            <programlisting>
              $ tar xzvf schemas.redaction-technique.org.tar.gz &amp;&amp; \
              cd &lt;répertoire de langue&gt; &amp;&amp; \
              cp ../schemas.redaction-technique.org/concepts/schemas.xml concepts/ &amp;&amp; \
              cp ../schemas.redaction-technique.org/faq/schemas.xml faq/ &amp;&amp; \
              cp ../schemas.redaction-technique.org/reference/schemas.xml reference/ &amp;&amp; \
              cp ../schemas.redaction-technique.org/tasks/schemas.xml tasks/ &amp;&amp; \
              cp ../schemas.redaction-technique.org/tasks/schemas.xml tasks/ &amp;&amp; \
              cp ../schemas.redaction-technique.org/topics/schemas.xml topics/ &amp;&amp; \
              rm -rf ../schemas.redaction-technique.org/
            </programlisting>
            <para>
              Vos répertoires de langue doivent maintenant comporter les
              fichiers <filename>schemas.xml</filename> appropriés&nbsp;:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  fr_FR
                </para>
                <itemizedlist>
                  <listitem>
                    <para>
                      concepts
                    </para>
                    <itemizedlist>
                      <listitem>
                        <para>
                          schemas.xml
                        </para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </itemizedlist>
                <itemizedlist>
                  <listitem>
                    <para>
                      faq
                    </para>
                    <itemizedlist>
                      <listitem>
                        <para>
                          schemas.xml
                        </para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </itemizedlist>
                <itemizedlist>
                  <listitem>
                    <para>
                      reference
                    </para>
                    <itemizedlist>
                      <listitem>
                        <para>
                          schemas.xml
                        </para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </itemizedlist>
                <itemizedlist>
                  <listitem>
                    <para>
                      tasks
                    </para>
                    <itemizedlist>
                      <listitem>
                        <para>
                          schemas.xml
                        </para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </itemizedlist>
                <itemizedlist>
                  <listitem>
                    <para>
                      topics
                    </para>
                    <itemizedlist>
                      <listitem>
                        <para>
                          schemas.xml
                        </para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Ouvrez un fichier de contenu DITA XML (.dita) avec Emacs. La
                syntaxe DITA XML apparaît en couleurs. Les endroits où le schéma
                n'est pas respecté sont soulignés en rouge.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Pour insérer une nouvelle balise entrez &lt;, puis appuyez sur
                Ctrl+Entrée. La liste des balises possibles apparaît.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Sélectionnez une balise, puis appuyez sur Entrée. Appuyez sur
                Ctrl+Entrée pour afficher la liste des attributs autorisés.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Pour insérer une balise fermante après du texte, entrez &lt;/,
                puis appuyez sur Ctrl+Entrée.
              </phrase>
            </para>
          </listitem>
        </orderedlist>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="didacticiels-dita-xml-et-xsl-fo"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="accelerer-sa-saisie-avec-le-mode-predictive-pour-emacs">
        <title>Accélérer sa saisie avec le mode Predictive pour Emacs</title>
        <para>
          Ce didacticiel mode <emphasis role="italic">Predictive</emphasis> pour
          Emacs est destiné à vous guider dans la mise en place et l'utilisation
          du mode Emacs d'aide à la rédaction et d'autocomplétion des mots
          anglais et français <emphasis role="italic">Predictive</emphasis> dans
          un environnement GNU/Linux (en l'occurrence, Debian).
        </para>
        <orderedlist>
          <listitem>
            <para>
              <phrase>
                Installez make et texinfo&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $ sudo aptitude install make texinfo
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Téléchargez <ulink
                url="http://www.dr-qubit.org/emacs.php#predictive-download">
                Predictive</ulink>.
              </phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Décompressez l'archive <emphasis
                role="italic">Predictive</emphasis>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $ tar xzvf predictive-0.23.13.tar.gz
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Placez-vous dans le répertoire
                <filename>predictive</filename>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $ cd predictive
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Compilez <emphasis role="italic">Predictive</emphasis>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $ make
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Installez <emphasis role="italic">Predictive</emphasis>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              $ sudo make install
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Insérez le code suivant dans le fichier
                <filename>.emacs</filename>&nbsp;:
              </phrase>
            </para>
            <programlisting>
              ;; predictive install location
              (add-to-list 'load-path "~/.emacs.d/predictive/")
              ;; dictionary locations
              (add-to-list 'load-path "~/.emacs.d/predictive/latex/")
              (add-to-list 'load-path "~/.emacs.d/predictive/texinfo/")
              (add-to-list 'load-path "~/.emacs.d/predictive/html/")
              ;; load predictive package
              (require 'predictive)
            </programlisting>
          </listitem>
          <listitem>
            <para>
              <phrase>
                Lancez Emacs, puis appuyez sur Alt+X et entrez&nbsp;:
              </phrase>
            </para>
            <programlisting>
              predictive-mode
            </programlisting>
          </listitem>
        </orderedlist>
        <itemizedlist>
          <title>Related links</title>
          <listitem>
            <para>
              <xref linkend="didacticiels-dita-xml-et-xsl-fo"/>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>
</article>