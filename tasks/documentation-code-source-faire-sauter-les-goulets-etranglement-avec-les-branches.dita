<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN"
"/usr/share/dita-ot/dtd/technicalContent/dtd/task.dtd">
<task id="faire-sauter-les-goulets-etranglement-avec-les-branches">
  <title>Faire sauter les goulets d'étranglement avec les branches</title>
  <taskbody>
    <context>
      <p>
        Les branches <b>Git</b> permettent de facilement effectuer en parallèle
        plusieurs tâches non liées :
      </p>
      <p>
        Imaginons le scénario de travail suivant :
      </p>
      <ul>
        <li>
          On vous demande de migrer une section d'un document à un autre.
        </li>
        <li>
          Vous envoyez votre proposition pour validation.
        </li>
        <li>
          La validation se fait attendre et vous devez avancer sur d'autres
          parties des documents.
        </li>
      </ul>
      <p>
        Comment faire sauter ce goulot d'étranglement ? C'est (relativement)
        simple :
      </p>
    </context>
    <steps>
      <step>
        <cmd>
          Par défaut, vous travaillez sur la branche <b>master</b>. Votre espace
          de travail contient des modifications que vous ne souhaitez pas
          <b>committer</b> avant validation.
        </cmd>
      </step>
      <step>
        <cmd>
          Créez une nouvelle branche : <b>git checkout -b ma-branche</b>.
        </cmd>
      </step>
      <step>
        <cmd>
          <b>Committez</b> vos modifications sur la nouvelle branche : <b>git
          add mes-fichiers</b>, <b>git commit -m &quot;mon message de
          commit&quot;</b>.
        </cmd>
      </step>
      <step>
        <cmd>
          Vous repassez sur la branche master <b>git checkout master</b> et
          passez à votre deuxième tâche. 5a. Si votre première tâche n'est pas
          validée, vous repassez sur la branche provisoire : <b>git checkout
          ma-branche</b> et faites un nouveau commit (que vous pourrez fusionner
          avec le ou les précédents après validation).
        </cmd>
      </step>
      <step>
        <cmd>
          Lorsque vous recevez la validation de la première tâche, vous mettez
          votre travail en cours de côté : <b>git stash</b>.
        </cmd>
      </step>
      <step>
        <cmd>
          Vous fusionnez la branche provisoire avec la branche master : <b>git
          merge ma-branche</b>.
        </cmd>
      </step>
      <step>
        <cmd>
          Vous récupérez votre travail en cours : <b>git stash pop</b>.
        </cmd>
      </step>
    </steps>
    <result>
      <p>
        Si vous n'avez pas besoin d'effectuer deux lots de tâches en parallèle,
        vous pouvez sans problème travailler dans votre espace local. Si vous
        devez revenir sur vos modifications, appellez la commande <b>git reset
        --hard HEAD</b> pour écraser vos fichiers non <b>commités</b> du
        répertoire local par ceux du dernier <b>commit</b>.
      </p>
    </result>
  </taskbody>
</task>
